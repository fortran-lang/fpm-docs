# Copyright (C) 2021 Fortran programming language community
# This file is distributed under the same license as the fpm package.
# Sebastian Ehlert <awvwgk@disroot.org>, 2021.
# 左志华 <zuo.zhihua@qq.com>, 2021~2022.
#
msgid ""
msgstr ""
"Project-Id-Version: fpm\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-16 19:48+0200\n"
"PO-Revision-Date: 2023-06-29 13:54+0000\n"
"Last-Translator: 左志华 <zuo.zhihua@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"fortran-lang/fpm/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.18.1\n"
"Generated-By: Babel 2.10.3\n"

#: ../../pages/design/index.md:3
msgid "Design documents"
msgstr "设计文档"

#: ../../pages/design/index.md:6
msgid ""
"This section contains the resources around the design of the Fortran Package "
"Manager (fpm)."
msgstr "本节包含有关Fortran包管理器（fpm）设计的资源。"

#: ../../pages/design/index.md:9
msgid ""
"Fortran Package Manager (fpm) is a package manager and build system for "
"Fortran. Its key goal is to improve the user experience of Fortran "
"programmers. It does so by making it easier to build your Fortran program or "
"library, run the executables, tests, and examples, and distribute it as a "
"dependency to other Fortran projects. Fpm's user interface is modeled after "
"[Rust's Cargo](https://doc.rust-lang.org/cargo/). Its long term vision is to "
"nurture and grow the ecosystem of modern Fortran applications and libraries."
msgstr ""
"Fortran Package "
"Manager（fpm）是Fortran的包管理器和构建系统。它的主要目标是改善Fortran程序员的用户体验。它通过使构建Fortran程序或函数库，运行可执行文件、测试和示例以及将其作为依赖项分发到其它Fortran项目变得更加容易来实现这一目标。fpm的用户界面以[Rust的Cargo](https://doc"
".rust-lang.org/cargo/)为蓝本，其长期愿景是培育和发展现代Fortran应用程序和库的生态系统。"

#: ../../pages/design/logo.md:1
msgid "The fpm logo"
msgstr "fpm 徽标"

#: ../../pages/design/logo.md:4
msgid ""
"The fpm logo was developed by the Fortran community in "
"[fpm#380](https://github.com/fortran-lang/fpm/discussions/380) and "
"contributed by [@1984logo](https://github.com/1984logo)."
msgstr ""
"fpm 徽标由 Fortran 社区在 [fpm#380](https://github.com/fortran-"
"lang/fpm/discussions/380) 开发并由 [@1984logo](https://github.com/1984logo) 贡献。"

#: ../../pages/design/logo.md:7
msgid ""
"The logo for the Fortran package manager (fpm) represents a gift box with a "
"bow forming the letter F. For the monochromatic version the color of the "
"Fortran logo {bdg-primary-line}`#734f96` is used. The color version "
"additionally uses lighter and darker variants of the base color. While both "
"variants are supposed to be visible on dark background, the logo can be "
"produced in light color or as outline to be better visible when used on dark "
"or black backgrounds."
msgstr ""
"Fortran 包管理器 (fpm) 的徽标代表一个带有蝴蝶结的礼品盒，形成字母 F。对于单色版本，使用 Fortran 徽标 {bdg-primary-"
"line}`#734f96` "
"的颜色。颜色版本还使用基色的较浅和较深的变体。虽然这两种变体都应该在深色背景下可见，但徽标可以以浅色或轮廓制作，以便在深色或黑色背景上使用时更容易看到。"

#: ../../pages/how-to/index.md:3
msgid "How-To guides"
msgstr "操作指南"

#: ../../pages/how-to/index.md:6
msgid ""
"This section contains practical guides and recipes for solving specific "
"problems with fpm."
msgstr "本节包含解决fpm特定问题的实用指南和步骤。"

#: ../../pages/index.md:138
msgid "Installation"
msgstr "安装"

#: ../../pages/index.md:138
msgid "Tutorial"
msgstr "教程"

#: ../../pages/index.md:138
msgid "How-To"
msgstr "操作指南"

#: ../../pages/index.md:138
msgid "Reference"
msgstr "参考"

#: ../../pages/index.md:138
msgid "Design"
msgstr "设计文档"

#: ../../pages/index.md:138 ../../pages/registry/index.rst:2
msgid "Registry"
msgstr "注册"

#: ../../pages/index.md:5 ../../pages/index.md:13
msgid "Fortran Package Manager"
msgstr "Fortran 包管理器"

#: ../../pages/index.md:16
msgid "Package manager and build system for Fortran"
msgstr "Fortran 的包管理器与构建系统"

#: ../../pages/index.md:19
msgid "Welcome to the documentation for the Fortran Package Manager (fpm)."
msgstr "欢迎浏览 Fortran 包管理器（Fortran Package Manager）的文档。"

#: ../../pages/index.md:22
msgid ""
"These pages are currently under construction. Please help us improve them by "
"contributing content or reporting issues."
msgstr "此页面目前正在建设中，请帮助我们贡献内容或者反馈议题。"

#: ../../pages/index.md:37
msgid "{octicon}`download` Install"
msgstr "{octicon}`download` 安装"

#: ../../pages/index.md:40
msgid "Instructions on how to install fpm across Windows, Linux, macOS and more."
msgstr "关于如何在Windows、Linux、macOS和其他系统中安装fpm的说明。"

#: ../../pages/index.md:49
msgid "Install fpm"
msgstr "安装fpm"

#: ../../pages/index.md:59
msgid "{octicon}`mortar-board` Tutorials"
msgstr "{octicon}`mortar-board` 教程"

#: ../../pages/index.md:62
msgid ""
"Learn about using fpm for Fortran development, creating projects and managing"
" dependencies."
msgstr "学习如何使用 fpm 进行 Fortran 开发、创建项目和管理依赖项。"

#: ../../pages/index.md:71
msgid "Browse tutorials"
msgstr "浏览教程"

#: ../../pages/index.md:81
msgid "{octicon}`book` How-To Guides"
msgstr "{octicon}`book` 操作指南"

#: ../../pages/index.md:84
msgid "Practical guides and recipes to solve specific problems with fpm"
msgstr "使用 fpm 解决特定问题的实用指南和方案。"

#: ../../pages/index.md:93
msgid "Browse recipes"
msgstr "浏览指南"

#: ../../pages/index.md:103
msgid "{octicon}`gear` References"
msgstr "{octicon}`gear` 参考"

#: ../../pages/index.md:106
msgid "Specifications of fpm components and implementation references"
msgstr "fpm 组件的规范和实现参考。"

#: ../../pages/index.md:115
msgid "Browse references"
msgstr "浏览参考"

#: ../../pages/index.md:120
msgid "{fa}`cubes` Registry"
msgstr "{fa}`cubes` 注册表"

#: ../../pages/index.md:122
msgid ""
"There are already many packages available for use with fpm, providing an "
"easily accessible and rich ecosystem of general purpose and high-performance "
"code. For a full list of packages checkout the [fpm "
"registry](registry/index). New packages can be submitted to the registry "
"[here](https://github.com/fortran-lang/fpm-registry)."
msgstr ""
"已经有许多软件包可通过 fpm 使用，它们提供了易于获取且丰富的通用和高性能代码生态系统。有关软件包的完整列表，请查看[fpm注册表](https"
"://fortran-lang.org/packages/fpm)。点击[此处](https://github.com/fortran-lang/fpm-"
"registry)提交新软件包到注册表。"

#: ../../pages/index.md:127
msgid "{fa}`newspaper` News"
msgstr "{fa}`newspaper` 新闻"

#: ../../pages/index.md:129
msgid ""
"Recent events around the Fortran Package Manager, such as new releases, "
"conference talks, and new packages will be announced here."
msgstr "近期围绕Fortran软件包管理器的活动，比如新版本发布、会议讨论和新软件包，将在这里宣布。"

#: ../../pages/install/index.md:3
msgid "Installing fpm"
msgstr "安装fpm"

#: ../../pages/install/index.md:5
msgid ""
"This how-to guide covers the installation of the Fortran Package Manager "
"(fpm) on various platforms."
msgstr "本操作指南涵盖了在各种平台上安装Fortran包管理器（fpm）的过程。"

#: ../../pages/install/index.md:7
msgid "{fab}`apple` {fab}`linux` {fab}`windows` Download binaries"
msgstr "{fab}`apple` {fab}`linux` {fab}`windows` 下载二进制文件"

#: ../../pages/install/index.md:9
msgid ""
"Binaries for macOS, Linux, and Windows (all on x86-64) are available for "
"download for each release of fpm, as well as the latest (bleeding edge) "
"release which mirrors the latest commit in the main branch of fpm."
msgstr "macOS、Linux和Windows（全部为x86-64）平台的fpm各个版本都提供了二进制文件下载，包括最新的发布版，它是fpm主分支最新提交的镜像版本。"

#: ../../pages/install/index.md:11
msgid ""
"Navigate to [fpm releases](https://github.com/fortran-lang/fpm/releases) to "
"see all available releases. The downloadable files are available at the "
"bottom of each release section under *Assets*. Click on the appropriate link "
"based on your OS. For example, to download a macOS fpm binary, click on the "
"link that has *macos* in its name. After downloading, you will need to make "
"your binary executable. On Linux and macOS, you can do this by typing"
msgstr ""
"访问[fpm发行版（release）](https://github.com/fortran-"
"lang/fpm/releases)以查看所有可用版本。可下载文件位于\"Assets\"下每个版本部分的底部。根据您的操作系统单击相应的链接。例如，要下载macOS的fpm二进制文件，请单击名称中包含*macos*的链接。下载后，您需要使二进制文件具有可执行权限。在Linux和macOS上，您可以通过键入"

#: ../../pages/install/index.md:22
msgid ""
"Optionally, place the binary in a directory that is globally accessible "
"(*i.e.* in the ``PATH`` environment variable on Linux and macOS). You can "
"also rename the binary to just *fpm* for easier use."
msgstr "（可选）将二进制文件放在全局可访问的目录中（即在Linux和macOS上的环境变量``PATH``中）。您还可以将二进制文件重命名为*fpm*，以便于使用。"

#: ../../pages/install/index.md:25
msgid ""
"For Windows, both a self-contained binary and a Windows Installer for fpm are"
" available."
msgstr "对于Windows，既有独立的二进制文件，也有适用于fpm的Windows安装程序。"

#: ../../pages/install/index.md:28
msgid ""
"Links that end with ``.sha256`` provide the cryptographic hashes that you can"
" use to verify if the download of your binary was successful. To verify the "
"integrity of the downloaded binary the checksum can be computed locally and "
"compared with the one provided in the release"
msgstr "以``.sha256``结尾的链接提供加密哈希，您可以使用这些哈希来验证二进制文件的下载是否成功。为了验证下载的二进制文件的完整性，可以在本地计算校验和，并与发行版中提供的校验和进行比较"

#: ../../pages/install/index.md:38
msgid ""
"If the checksums mismatch, the download was most likely incomplete and the "
"binary non-functional. In this case, retry the download of the binary and "
"confirm that the checksums match."
msgstr "如果校验和不匹配，则下载很可能不完整，二进制文件无法正常工作。在这种情况下，请重试下载二进制文件并确认校验和匹配。"

#: ../../pages/install/index.md:43
msgid "{fab}`windows` MSYS2 package manager"
msgstr "{fab}`windows` MSYS2包管理器"

#: ../../pages/install/index.md:45
msgid ""
"[![MSYS2 mingw package](https://repology.org/badge/version-for-"
"repo/msys2_mingw/fpm-fortran-package-"
"manager.svg)](https://packages.msys2.org/base/mingw-w64-fpm)"
msgstr ""
"[![MSYS2 mingw package](https://repology.org/badge/version-for-repo/"
"msys2_mingw/fpm-fortran-package-manager.svg)](https://packages.msys2.org/"
"base/mingw-w64-fpm)"

#: ../../pages/install/index.md:45
msgid "MSYS2 mingw package"
msgstr "MSYS2 mingw 包"

#: ../../pages/install/index.md:47
msgid ""
"The [MSYS2 project](https://www.msys2.org) provides a package manager and "
"makes many common Unix tools available for Windows."
msgstr "[MSYS2 项目](https://www.msys2.org)提供了一个包管理器，并使许多常见的 Unix 工具可用于 Windows。"

#: ../../pages/install/index.md:50
msgid ""
"To install download the ``msys2-x86_64-YYYYMMDD.exe`` installer from the "
"MSYS2 webpage and run it. MSYS2 will create several new desktop shortcuts, "
"like *MSYS terminal*, *MinGW64 terminal* and *UCRT64 terminal* (more "
"information on MSYS2 terminals are available "
"[here](https://www.msys2.org/docs/terminals/))."
msgstr ""
"要安装 ``msys2-x86_64-YYYYMMDD.exe``，请从 MSYS2 网页下载安装程序并运行它。MSYS2 将创建几个新的桌面快捷方式，如"
" *MSYS* 终端、*MinGW64* 终端和 *UCRT64* 终端（有关 MSYS2 "
"终端的更多信息可在[此处](https://www.msys2.org/docs/terminals/)获得）。"

#: ../../pages/install/index.md:53
msgid ""
"The Fortran Package Manager is supported for the *UCRT64*, *MinGW64*, or "
"*MinGW32* terminal."
msgstr "*UCRT64*、*MinGW64*或*MinGW32*终端支持安装Fortran包管理器（fpm）。"

#: ../../pages/install/index.md:56
msgid "Open a new terminal and update your installation with"
msgstr "打开新终端并更新MSYS2系统"

#: ../../pages/install/index.md:62
msgid ""
"You might have to update MSYS2 and ``pacman`` first, restart the terminal and"
" run the above command again to update the installed packages."
msgstr "你可能需要首先更新MSYS2和``pacman``，然后重新启动终端并再次运行上述命令以更新已安装的包。"

#: ../../pages/install/index.md:64
msgid ""
"If you are using the *MinGW64 terminal* you can install the required software"
" with"
msgstr "如果你使用的是*MinGW64*终端，则可以使用"

#: ../../pages/install/index.md:71
msgid ""
"Both *git* and *gfortran* are not mandatory dependencies for running fpm. If "
"you provide *git* and *gfortran* from outside they will get picked up as "
"well."
msgstr "*git*和*gfortran*都不是运行fpm的必需依赖项。如果你从外面提供*git*和*gfortran*，它们也会被包括进来。"

#: ../../pages/install/index.md:76
msgid "{fab}`apple` Homebrew package manager"
msgstr "{fab}`apple` Homebrew包管理器"

#: ../../pages/install/index.md:78
msgid ""
"The Fortran Package Manager (fpm) is available for the "
"[homebrew](https://brew.sh) package manager on MacOS via an additional tap. "
"To install fpm via brew, include the new tap and install it using"
msgstr ""
"Fortran 包管理器（fpm）在 MacOS 上的 [Homebrew 包管理器](https://brew.sh)中可以获取，只需额外的 "
"``tap`` 即可。要通过 brew 安装 fpm，使用"

#: ../../pages/install/index.md:86
msgid ""
"Binary distributions are available for MacOS 11 (Catalina) and 12 (Big Sur) "
"for x86\\_64 architectures. For other platforms fpm will be built locally "
"from source automatically."
msgstr "二进制发行版适用于MacOS 11（Catalina）和12（Big Sur），适用于x86\\_64架构。对于其它平台，fpm将自动从源代码本地构建。"

#: ../../pages/install/index.md:89 ../../pages/install/index.md:102
msgid "Fpm should be available and functional after those steps."
msgstr "在这些步骤之后，fpm应该可用且功能正常。"

#: ../../pages/install/index.md:92
msgid "{fab}`apple` Macports"
msgstr "{fab}`apple` Macports"

#: ../../pages/install/index.md:94
msgid ""
"[![MacPorts package](https://repology.org/badge/version-for-repo/macports"
"/fpm-fortran-package-manager.svg)](https://ports.macports.org/port/fpm/)"
msgstr ""
"[![MacPorts 包](https://repology.org/badge/version-for-repo/macports/fpm-"
"fortran-package-manager.svg)](https://ports.macports.org/port/fpm/)"

#: ../../pages/install/index.md:94
msgid "MacPorts package"
msgstr "MacPorts 包"

#: ../../pages/install/index.md:96
msgid ""
"The Fortran Package Manager (fpm) is available via "
"[macports](https://www.macports.org/) and can be installed with"
msgstr ""
"Fortran软件包管理器（fpm）可以通过[macports](https://www.macports.org/"
")获得，并且可以通过以下方式安装"

#: ../../pages/install/index.md:105
msgid "{fab}`apple` {fab}`linux` Conda package manager"
msgstr "{fab}`apple` {fab}`linux` Conda包管理器"

#: ../../pages/install/index.md:107
msgid ""
"[![Conda (channel only)](https://img.shields.io/conda/vn/conda-"
"forge/fpm)](https://github.com/conda-forge/fpm-feedstock)"
msgstr ""
"[![Conda (channel only)](https://img.shields.io/conda/vn/conda-forge/"
"fpm)](https://github.com/conda-forge/fpm-feedstock)"

#: ../../pages/install/index.md:107
msgid "Conda (channel only)"
msgstr "Conda (channel only)"

#: ../../pages/install/index.md:109
msgid "Fpm is available on [conda-forge], to add conda-forge to your channels use:"
msgstr "fpm可在conda-forge上找到，以将conda-forge添加到你的频道使用："

#: ../../pages/install/index.md:115
msgid "Fpm can be installed with:"
msgstr "fpm可以以下命令安装："

#: ../../pages/install/index.md:122
msgid ""
"Alternatively, if you want fpm to be always available directly install into "
"your current environment with"
msgstr "或者，如果你希望 fpm 始终可用，直接安装到当前环境中"

#: ../../pages/install/index.md:129
msgid ""
"The conda package manager can be installed from "
"[miniforge](https://github.com/conda-forge/miniforge/releases) or from "
"[miniconda](https://docs.conda.io/en/latest/miniconda.html)."
msgstr ""
"conda 包管理器可以从[miniforge](https://github.com/conda-"
"forge/miniforge/releases)或[miniconda](https://docs.conda.io/en/latest/miniconda.html)安装。"

#: ../../pages/install/index.md:137
msgid "{fab}`apple` {fab}`linux` Spack package manager"
msgstr "{fab}`apple` {fab}`linux` Spack包管理器"

#: ../../pages/install/index.md:139
msgid ""
"[![Spack package](https://repology.org/badge/version-for-repo/spack/fpm-"
"fortran-package-"
"manager.svg)](https://packages.spack.io/package.html?name=fpm)"
msgstr ""
"[![Spack 包](https://repology.org/badge/version-for-repo/spack/fpm-fortran-"
"package-manager.svg)](https://packages.spack.io/package.html?name=fpm)"

#: ../../pages/install/index.md:139
msgid "Spack package"
msgstr "Spack 包"

#: ../../pages/install/index.md:141
msgid ""
"Fpm is available with spack in its develop version. To install fpm from spack"
" use"
msgstr "Fpm在spack的开发版本中是可用的。要从spack安装fpm，请使用"

#: ../../pages/install/index.md:148
msgid ""
"You can add `+openmp` to enable parallelization of the target compilation in "
"fpm. To use fpm in your environment load it with"
msgstr "你可以添加`+openmp`来启用fpm中目标编译的并行化。要在你的环境中使用fpm，可以用"
"以下命令加载它"

#: ../../pages/install/index.md:155
msgid ""
"For more details check the package information "
"[here](https://spack.readthedocs.io/en/latest/package_list.html#fpm)."
msgstr ""
"更多细节请查看软件包信息[这里](https://spack.readthedocs.io/en/latest/"
"package_list.html#fpm)。"

#: ../../pages/install/index.md:160
msgid "{fab}`linux` Arch Linux user repository"
msgstr "{fab}`linux` Arch Linux用户存储库"

#: ../../pages/install/index.md:162
msgid ""
"[![AUR version](https://img.shields.io/aur/version/fortran-"
"fpm)](https://aur.archlinux.org/packages/fortran-fpm) [![AUR "
"version](https://img.shields.io/aur/version/fortran-fpm-"
"bin)](https://aur.archlinux.org/packages/fortran-fpm-bin)"
msgstr ""
"[![AUR version](https://img.shields.io/aur/version/fortran-fpm)](https://aur."
"archlinux.org/packages/fortran-fpm) [![AUR version](https://img.shields.io/"
"aur/version/fortran-fpm-bin)](https://aur.archlinux.org/packages/fortran-fpm-"
"bin)"

#: ../../pages/install/index.md:162
msgid "AUR version"
msgstr "AUR版本"

#: ../../pages/install/index.md:165
msgid ""
"The Arch Linux user repository (AUR) contains two packages for the Fortran "
"Package Manager (fpm). With the [fortran-fpm-"
"bin](https://aur.archlinux.org/packages/fortran-fpm-bin/) installs the "
"statically linked Linux/x86\\_64 binary from the release page, while the "
"[fortran-fpm](https://aur.archlinux.org/packages/fortran-fpm/) package will "
"bootstrap fpm from source."
msgstr ""
"Arch Linux 用户存储库（AUR）包含两个 Fortran 包管理器（fpm）包。使用 [fortran-fpm-"
"bin](https://aur.archlinux.org/packages/fortran-fpm-bin/) 从发布页面安装静态链接的 "
"Linux/x86\\_64 二进制文件，而 [fortran-fpm](https://aur.archlinux.org/packages"
"/fortran-fpm/) 软件包将从源代码引导安装 fpm。"

#: ../../pages/install/index.md:168
msgid "Select one of the PKGBUILDs and retrieve it with"
msgstr "选择其中一个 PKGBUILD 并使用"

#: ../../pages/install/index.md:175
msgid ""
"As usual, first inspect the PKGBUILD before building it. After verifying the "
"PKGBUILD is fine, build the package with"
msgstr "像往常一样，在构建 PKGBUILD 之前，请先检查它。验证 PKGBUILD 是否正常后，使用"

#: ../../pages/install/index.md:182
msgid "Once the build passed pacman will ask to install the fpm package."
msgstr "一旦构建通过，pacman 将询问是否安装fpm包。"

#: ../../pages/install/index.md:185
msgid "OpenBSD ports"
msgstr "OpenBSD端口"

#: ../../pages/install/index.md:187
msgid ""
"[![OpenBSD port](https://repology.org/badge/version-for-repo/openbsd/fpm-"
"fortran-package-manager.svg)](https://openports.pl/path/devel/fpm)"
msgstr ""
"[![OpenBSD port](https://repology.org/badge/version-for-repo/openbsd/fpm-"
"fortran-package-manager.svg)](https://openports.pl/path/devel/fpm)"

#: ../../pages/install/index.md:187
msgid "OpenBSD port"
msgstr "OpenBSD端口"

#: ../../pages/install/index.md:189
msgid ""
"A port for OpenBSD is available in the default port tree. To install fpm "
"install the *devel/fpm* port with"
msgstr "在默认的端口树中有一个用于OpenBSD的端口。要安装fpm，请安装*devel/"
"fpm*端口，使用"

#: ../../pages/install/index.md:192
msgid "``{code-block} bash cd /usr/ports/devel/fpm make install clean"
msgstr "``{code-block} bash cd /usr/ports/devel/fpm make install clean"

#: ../../pages/install/index.md:211
msgid "Building from source"
msgstr "从源代码构建"

#: ../../pages/install/index.md:213
msgid ""
"To build fpm from source get the latest fpm source, either by cloning the "
"repository from GitHub with"
msgstr "要从源代码构建 fpm，请获取最新的 fpm 源代码，方法是从 GitHub 克隆存储库"

#: ../../pages/install/index.md:220
msgid "or by downloading a source tarball from the latest source"
msgstr "或从最新源下载源代码压缩包"

#: ../../pages/install/index.md:228
msgid ""
"The available install script allows to bootstrap fpm by using just a Fortran "
"compiler, git and network access. Invoke the script to start the bootstrap "
"build"
msgstr "可用的安装脚本允许仅使用 Fortran 编译器，git 和网络访问来引导安装 fpm。调用脚本以启动引导程序构建"

#: ../../pages/install/index.md:235
msgid "Fpm will be installed in ``~/.local/bin/fpm``."
msgstr "fpm将安装在``~/.local/bin/fpm``。"

#: ../../pages/install/index.md:238
msgid ""
"Building the bootstrapper binary from the single source file version might "
"take a few seconds, which might make the install script look like it is "
"hanging."
msgstr "从单个源文件版本生成引导程序二进制文件可能需要一些时间，这可能会使安装脚本看起来像是未响应的。"

#: ../../pages/install/index.md:242
msgid ""
"The installation location can be adjusted by passing the "
"``--prefix=/path/to/install`` option."
msgstr "可以通过传递选项``--prefix=/path/to/install``来调整安装位置。"

#: ../../pages/install/index.md:245
msgid ""
"If you can't run the install script, you can perform the bootstrap procedure "
"manually, with the following three steps:"
msgstr "如果无法运行安装脚本，则可以通过以下三个步骤手动执行自举安装过程："

#: ../../pages/install/index.md:247
msgid "Download the single source version of fpm"
msgstr "下载 fpm 的单一源文件版本"

#: ../../pages/install/index.md:253
msgid "Build a bootstrap binary from the single source version"
msgstr "从单一源文件版本构建引导二进制文件"

#: ../../pages/install/index.md:260
msgid "Use the bootstrap binary to build the feature complete fpm version"
msgstr "使用自举二进制文件构建功能完整的 fpm 版本"

#: ../../pages/news.md:3
msgid "News"
msgstr "新闻"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:7
msgid "Fpm version 0.5.0 released"
msgstr "Fpm 0.5.0 版本发布"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:9
msgid ""
"We have a large number of bug fixes in this release and made plenty of "
"improvements to the tooling around fpm, like the continuous delivery and the "
"Windows installer. New features include the possibility for better "
"compiler/linker selection and the improved build backend (test are only build"
" when needed, link dependencies are properly tracked)."
msgstr ""
"我们在此版本中修复了大量错误，并对围绕 fpm 的工具进行了大量改进，例如持续交付和 Windows "
"安装程序。新功能包括更好的编译器/链接器选择和改进的构建后端（仅在需要时构建测试，正确跟踪链接依赖关系）。"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:12
msgid ""
"Find the full release notes [here](https://github.com/fortran-"
"lang/fpm/releases/tag/v0.5.0)."
msgstr "在 [此处](https://github.com/fortran-lang/fpm/releases/tag/v0.5.0) 找到完整的发行说明。"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:14
msgid "Changes"
msgstr "改变"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:16
msgid ""
"tests are only build for fpm test and not by default anymore "
"([#572](https://github.com/fortran-lang/fpm/pull/572))"
msgstr "测试只为 fpm 测试构建，不再默认 ([#572](https://github.com/fortran-lang/fpm/pull/572))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:17
msgid ""
"environment variables for setting Fortran and C compiler changed "
"([#549](https://github.com/fortran-lang/fpm/pull/549), "
"[#584](https://github.com/fortran-lang/fpm/pull/584))"
msgstr ""
"用于设置 Fortran 和 C 编译器的环境变量已更改 ([#549](https://github.com/fortran-"
"lang/fpm/pull/549), [#584](https://github.com/fortran-lang/fpm/pull/584))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:18
msgid ""
"add LFortran optimization flag to release profile ([#597](https://github.com"
"/fortran-lang/fpm/pull/597))"
msgstr ""
"将 LFortran 优化标志添加到发布配置文件 ([#597](https://github.com/fortran-"
"lang/fpm/pull/597))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:21
msgid "New features"
msgstr "新特性"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:23
msgid ""
"command line arguments for linker, archiver and C-compiler added "
"([#549](https://github.com/fortran-lang/fpm/pull/549))"
msgstr "添加了链接器、存档器和 C 编译器的命令行参数 ([#549](https://github.com/fortran-lang/fpm/pull/549))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:26
msgid "Fixes"
msgstr "修复"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:28
msgid ""
"tabs are correctly expanded in source file scanning "
"([#521](https://github.com/fortran-lang/fpm/pull/521))"
msgstr "Tab 键在源文件扫描中正确展开 ([#521](https://github.com/fortran-lang/fpm/pull/521))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:29
msgid ""
"installer script will use fpm update to avoid stale dependencies "
"([#557](https://github.com/fortran-lang/fpm/pull/557))"
msgstr ""
"安装程序脚本将使用 fpm update 来避免过时的依赖项（[#557](https://github.com/fortran-"
"lang/fpm/pull/557)）"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:30
msgid ""
"use multiple build output directories depending on link line options "
"([#575](https://github.com/fortran-lang/fpm/pull/575))"
msgstr "根据链接行选项使用多个构建输出路径 ([#575](https://github.com/fortran-lang/fpm/pull/575))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:31
msgid ""
"update truncated help text ([#578](https://github.com/fortran-"
"lang/fpm/pull/578))"
msgstr "更新截断的帮助文本 ([#578](https://github.com/fortran-lang/fpm/pull/578))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:32
msgid ""
"fix directory removal in fpm new tests ([#579](https://github.com/fortran-"
"lang/fpm/pull/579))"
msgstr "修复 fpm 新测试中的路径删除 ([#579](https://github.com/fortran-lang/fpm/pull/579))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:33
msgid ""
"use MSVS like commands for Intel compilers on Windows "
"([#590](https://github.com/fortran-lang/fpm/pull/590))"
msgstr ""
"在 Windows 上为英特尔编译器使用类似 MSVS 的命令 ([#590](https://github.com/fortran-"
"lang/fpm/pull/590))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:34
msgid ""
"add critical section to mkdir in backend ([#613](https://github.com/fortran-"
"lang/fpm/pull/613))"
msgstr ""
"在后端将 critical section（OpenMP 指令）添加到 mkdir ([#613](https://github.com/fortran-"
"lang/fpm/pull/613))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:35
msgid ""
"fix modules listing (for install) ([#612](https://github.com/fortran-"
"lang/fpm/pull/612))"
msgstr "修复模块列举（用于安装）（[#612](https://github.com/fortran-lang/fpm/pull/612)）"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:36
msgid ""
"repair --list option and correct obsolete descriptions of the --list option "
"([#607](https://github.com/fortran-lang/fpm/pull/607))"
msgstr ""
"修复 --list 选项并更正 --list 选项的过时描述 ([#607](https://github.com/fortran-"
"lang/fpm/pull/607))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:37
msgid ""
"fix incorrect Intel release flag on Windows ([#602](https://github.com"
"/fortran-lang/fpm/pull/602))"
msgstr ""
"修复 Windows 上不正确的 Intel 发布选项 ([#602](https://github.com/fortran-"
"lang/fpm/pull/602))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:39
msgid ""
"list names without suffix for Windows ([#595](https://github.com/fortran-"
"lang/fpm/pull/595))"
msgstr "为 Windows 列出不带后缀的名称 ([#595](https://github.com/fortran-lang/fpm/pull/595))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:43
msgid "Repository updates"
msgstr "存储库更新"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:45
msgid ""
"add files and workflow to make installer on release "
"([#616](https://github.com/fortran-lang/fpm/pull/616))"
msgstr "添加文件和工作流以在发布时生成安装程序 ([#616](https://github.com/fortran-lang/fpm/pull/616))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:46
msgid ""
"issue templates added to guide reporting of bugs, package issues, feature "
"requests and specification proposals ([#558](https://github.com/fortran-"
"lang/fpm/pull/558))"
msgstr ""
"添加问题模板以指导报告错误、包问题、功能请求和规范建议 ([#558](https://github.com/fortran-"
"lang/fpm/pull/558))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:47
msgid ""
"default branch renamed to *main* ([#565](https://github.com/fortran-"
"lang/fpm/pull/565))"
msgstr "默认分支重命名为 *main* ([#565](https://github.com/fortran-lang/fpm/pull/565))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:48
msgid ""
"update documentation on distributions supporting fpm, like spack and MSYS2 "
"([#562](https://github.com/fortran-lang/fpm/pull/562))"
msgstr ""
"更新支持 fpm 的发行版的文档，例如 spack 和 MSYS2 ([#562](https://github.com/fortran-"
"lang/fpm/pull/562))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:49
msgid ""
"new workflow to automatically generate single source fpm versions "
"([#563](https://github.com/fortran-lang/fpm/pull/563))"
msgstr "自动生成单源文件 fpm 版本的新工作流程 ([#563](https://github.com/fortran-lang/fpm/pull/563))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:50
msgid ""
"continuous delivery of current fpm git source implemented "
"([#569](https://github.com/fortran-lang/fpm/pull/569), "
"[#564](https://github.com/fortran-lang/fpm/pull/564))"
msgstr ""
"实现了当前 fpm git 源的持续交付 ([#569](https://github.com/fortran-lang/fpm/pull/569), "
"[#564](https://github.com/fortran-lang/fpm/pull/564))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:51
msgid ""
"update of bootstrapping instructions ([#587](https://github.com/fortran-"
"lang/fpm/pull/587))"
msgstr "更新引导指令 ([#587](https://github.com/fortran-lang/fpm/pull/587))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:52
msgid ""
"update README.md compiler, archiver, & link flags ([#598](https://github.com"
"/fortran-lang/fpm/pull/598))"
msgstr ""
"更新 README.md 编译器、归档器和链接标志 ([#598](https://github.com/fortran-"
"lang/fpm/pull/598))"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:55
msgid "Feedback"
msgstr "反馈"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:57
msgid "[Discourse thread](https://fortran-lang.discourse.group/t/2314)"
msgstr "[论坛主题帖](https://fortran-lang.discourse.group/t/2314)"

#: ../../pages/news/2021/11-21-fpm-version-0.5.0.md:58
msgid "[Twitter post](https://twitter.com/fortranlang/status/1462506491752161286)"
msgstr "[推特帖子](https://twitter.com/fortranlang/status/1462506491752161286)"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:7
msgid "Fpm version 0.6.0 released"
msgstr "Fpm 0.6.0 版本发布"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:9
msgid ""
"This release introduces a better visualization for the build output, compiler"
" output is only shown on error to keep the standard output clean for "
"successful builds. Furthermore, fpm can now detect unused modules and avoids "
"compiling modules that are not needed for an application, which improves the "
"compilation speed with large dependencies like stdlib. When creating a new "
"project with fpm the author information are now taken from the git "
"configuration to avoid using placeholders in the manifest. Several more bug "
"fixes and plenty of improvements went into this version as well."
msgstr ""
"此版本为构建输出引入了更好的可视化，编译器输出仅在错误时显示，以保持成功构建时标准输出的干净。此外，fpm "
"现在可以检测未使用的模块并避免编译使用程序不需要的模块，从而提高了 stdlib 等具有大型依赖项目的编译速度。使用 fpm 创建新项目时，作者信息现在从"
" git 配置中获取，以避免在清单中使用占位符。此版本还进行了更多错误修复和大量改进。"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:14
msgid ""
"Find the full release notes [here](https://github.com/fortran-"
"lang/fpm/releases/tag/v0.6.0)."
msgstr "在 [此处](https://github.com/fortran-lang/fpm/releases/tag/v0.6.0) 找到完整的发行说明。"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:16
msgid ""
"Many thanks to Pedro Costa ([@p-costa](https://github.com/p-costa)), "
"Sebastian Ehlert ([@awvwgk](https://github.com/awvwgk)), Laurence Kedward "
"([@lkedward](https://github.com/lkedward)), Wileam Y. Phan "
"([@wyphan](https://github.com/wyphan)), Arteev Raina "
"([@arteevraina](https://github.com/arteevraina)), Simon Rowe "
"([@wiremoons](https://github.com/wiremoons)), Andre Smit "
"([@freevryheid](https://github.com/freevryheid)), John Urban "
"([@urbanjost](https://github.com/urbanjost)), Zuo Zhihua "
"([@zoziha](https://github.com/zoziha)), [@st-maxwell](https://github.com/st-"
"maxwell), and [@noisegul](https://github.com/noisegul) for contributing "
"patches to this release."
msgstr ""
"非常感谢 Pedro Costa ([@p-costa](https://github.com/p-costa))、Sebastian Ehlert "
"([@awvwgk](https://github.com/awvwgk))、Laurence Kedward ( "
"[@lkedward](https://github.com/lkedward))、Wileam Y. Phan "
"([@wyphan](https://github.com/wyphan))、Arteev Raina "
"([@arteevraina](https:///github.com/arteevraina))、Simon Rowe "
"([@wiremoons](https://github.com/wiremoons))、Andre Smit "
"([@freevryheid](https://github.com/freevryheid))、John "
"Urban([@urbanjost](https://github.com/urbanjost))、左志华([@zoziha](https://github.com/zoziha"
"))、[@st-maxwell](https://github.com/st-maxwell) 和 "
"[@noisegul](https://github.com/noisegul) 为本版本提供补丁。"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:19
#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:29
#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:34
#: ../../pages/news/2023/04-11-fpm-version-0.8.1.md:21
#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:20
msgid "Changelog"
msgstr "变更日志"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:21
msgid ""
"Better extraction of the Fortran compiler from the MPI wrapper "
"([#634](https://github.com/fortran-lang/fpm/pull/634))"
msgstr ""
"从 MPI 包装器中更好地提取 Fortran 编译器 ([#634](https://github.com/fortran-"
"lang/fpm/pull/634))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:22
msgid ""
"Update module output directory command for flang-new/f18 "
"([#645](https://github.com/fortran-lang/fpm/pull/645))"
msgstr ""
"更新 flang-new/f18 的module输出路径命令 ([#645](https://github.com/fortran-"
"lang/fpm/pull/645))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:23
msgid ""
"Respect user provided main-files ([#646](https://github.com/fortran-"
"lang/fpm/pull/646))"
msgstr "尊重用户提供的主源文件（[#646](https://github.com/fortran-lang/fpm/pull/646)）"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:24
msgid ""
"just allow . on new subcommand instead of changing canonical path "
"([#630](https://github.com/fortran-lang/fpm/pull/630))"
msgstr ""
"在 `new` 子命令允许 `.`，而不是更改规范路径 ([#630](https://github.com/fortran-"
"lang/fpm/pull/630))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:25
msgid ""
"get user name and email using git config if available else use defaults "
"([#652](https://github.com/fortran-lang/fpm/pull/652))"
msgstr ""
"如果可用，使用 git config 获取用户名和电子邮件，否则使用默认值 ([#652](https://github.com/fortran-"
"lang/fpm/pull/652))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:26
msgid ""
"Ignore hidden source files ([#654](https://github.com/fortran-"
"lang/fpm/pull/654))"
msgstr "忽略隐藏的源文件 ([#654](https://github.com/fortran-lang/fpm/pull/654))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:27
msgid ""
"Cleanup the backend output ([#622](https://github.com/fortran-"
"lang/fpm/pull/622))"
msgstr "清理后端输出 ([#622](https://github.com/fortran-lang/fpm/pull/622))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:28
msgid ""
"Add note about relocation of manifest reference ([#648](https://github.com"
"/fortran-lang/fpm/pull/648))"
msgstr "添加有关清单引用重定位的注释（[#648](https://github.com/fortran-lang/fpm/pull/648)）"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:29
msgid ""
"Fix for backtrace error when file not found in: `src/fpm_source_parsing.f90` "
"([#675](https://github.com/fortran-lang/fpm/pull/675))"
msgstr ""
"修复在以下位置找不到文件时的回溯错误：`src/fpm_source_parsing.f90` ([#675](https://github.com"
"/fortran-lang/fpm/pull/675))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:30
msgid ""
"Fix issue with backend pretty output ([#677](https://github.com/fortran-"
"lang/fpm/pull/677))"
msgstr "修复后端漂亮输出的问题 ([#677](https://github.com/fortran-lang/fpm/pull/677))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:31
msgid ""
"fix: remove remove unnecessary space in fpm new cmd "
"([#684](https://github.com/fortran-lang/fpm/pull/684))"
msgstr "修复：删除 fpm new 命令中不必要的空格 ([#684](https://github.com/fortran-lang/fpm/pull/684))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:32
msgid ""
"Small fix for `fpm_model` ([#688](https://github.com/fortran-"
"lang/fpm/pull/688))"
msgstr "`fpm_model` 的小修复 ([#688](https://github.com/fortran-lang/fpm/pull/688))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:33
msgid "add clean command ([#655](https://github.com/fortran-lang/fpm/pull/665))"
msgstr "添加 `clean` 清理命令 ([#655](https://github.com/fortran-lang/fpm/pull/665))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:34
msgid ""
"Fix for non-portable GFortran `-J` flag in install script "
"([#692](https://github.com/fortran-lang/fpm/pull/692))"
msgstr ""
"修复安装脚本中不可移植的 GFortran `-J` 选项 ([#692](https://github.com/fortran-"
"lang/fpm/pull/692))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:35
msgid "Fix show-model option ([#693](https://github.com/fortran-lang/fpm/pull/693))"
msgstr "修复 show-model 选项 ([#693](https://github.com/fortran-lang/fpm/pull/693))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:36
msgid ""
"Tree shaking for modules ([#676](https://github.com/fortran-"
"lang/fpm/pull/676))"
msgstr "模块的Tree shaking ([#676](https://github.com/fortran-lang/fpm/pull/676))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:37
msgid "Fix submodule shaking ([#704](https://github.com/fortran-lang/fpm/pull/704))"
msgstr "修复子模块抖动 ([#704](https://github.com/fortran-lang/fpm/pull/704))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:38
msgid ""
"fix: remove extra space from help-test cmd ([#686](https://github.com"
"/fortran-lang/fpm/pull/686))"
msgstr "修复：从 help-test命令中删除多余的空格（[#686](https://github.com/fortran-lang/fpm/pull/686)）"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:39
msgid ""
"Fix: to pipe up-to-date message to stderr ([#706](https://github.com/fortran-"
"lang/fpm/pull/706))"
msgstr "修复：将最新消息通过管道传输到 stderr ([#706](https://github.com/fortran-lang/fpm/pull/706))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:40
msgid ""
"Avoid infinite loop if command \"fpm-\" is in path ([#713](https://github.com"
"/fortran-lang/fpm/pull/713))"
msgstr ""
"避免在路径下运行 `fpm-` 命令出现的无限循环 ([#713](https://github.com/fortran-"
"lang/fpm/pull/713))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:41
msgid ""
"Fix --show-model, init `c_source%parent_modules` ([#712](https://github.com"
"/fortran-lang/fpm/pull/712))"
msgstr ""
"修复 --show-model, 初始化 `c_source%parent_modules` ([#712](https://github.com"
"/fortran-lang/fpm/pull/712))"

#: ../../pages/news/2022/06-19-fpm-version-0.6.0.md:42
msgid ""
"Add OMP critical for `make_archive` ([#708](https://github.com/fortran-"
"lang/fpm/pull/708))"
msgstr ""
"对 `make_archive` 添加 OMP critical ([#708](https://github.com/fortran-"
"lang/fpm/pull/708))"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:7
msgid "Fpm version 0.7.0 released"
msgstr "Fpm 0.7.0 版本发布"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:9
msgid ""
"This release introduces preprocessor support in the `fpm.toml` manifest, "
"allowing for preprocessor macros, file suffixes and directories where the "
"preprocessor should run. This feature was implemented as part of Arteev "
"Raina's Google Summer of Code 2022 project. Furthermore, fpm has now the "
"ability to compile C++ source files in addition to Fortran and C. Finally, "
"the ability to define compiler profiles in the `fpm.toml` manifest has been "
"added, although the profile settings are not currently used in the build "
"process."
msgstr ""
"此版本在 `fpm.toml` 清单中引入了预处理器支持，允许预处理器宏、文件后缀和应该运行预处理器的目录。此功能是 Arteev Raina 的 "
"Google Summer of Code 2022 项目的一部分。此外，除了 Fortran 和 C 之外，fpm 现在还能够编译 C++ "
"源文件。最后，添加了在 `fpm.toml` 清单中定义编译器配置文件的能力，尽管配置文件设置当前未在构建过程中使用。"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:16
msgid ""
"Find the full release notes [here](https://github.com/fortran-"
"lang/fpm/releases/tag/v0.7.0)."
msgstr "在 [此处](https://github.com/fortran-lang/fpm/releases/tag/v0.7.0) 找到完整的发行说明。"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:18
msgid ""
"Many thanks to Lewis McMillan ([@lewisfish](https://github.com/lewisfish)), "
"Damian Rouson ([@rouson](https://github.com/rouson)), Giannis Nikiteas "
"([@gnikit](https://github.com/gnikit)), Laurence Kedward "
"([@LKedward](https://github.com/LKedward)), Sebastian Ehlert "
"([@awvwgk](https://github.com/awvwgk)), Zuo Zhihua "
"([@zoziha](https://github.com/zoziha)), Jakub Jelínek "
"([@kubajj](https://github.com/kubajj)), Arteev Raina "
"([@arteevraina](https://github.com/arteevraina)) for contributing patches to "
"this release."
msgstr ""
"非常感谢 Lewis McMillan ([@lewisfish](https://github.com/lewisfish))、Damian "
"Rouson ([@rouson](https://github.com/rouson))、Giannis Nikiteas "
"([@gnikit](https://github.com/gnikit))、Laurence Kedward "
"([@LKedward](https://github.com/LKedward))、Sebastian Ehlert "
"([@awvwgk](https://github.com/awvwgk) ))、左志华 "
"([@zoziha](https://github.com/zoziha))、Jakub Jelínek "
"([@kubajj](https://github.com/kubajj))、Arteev Raina "
"([@arteevraina](https://github.com/arteevraina)）为这个版本贡献补丁。"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:31
msgid ""
"feat: added basic preprocess table configuration by in <https://github.com"
"/fortran-lang/fpm/pull/715>"
msgstr "特性：在 <https://github.com/fortran-lang/fpm/pull/715> 中，添加了基本的预处理表配置"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:32
msgid ""
"Add homebrew installation instructions to README.md by in <https://github.com"
"/fortran-lang/fpm/pull/718>"
msgstr ""
"在 <https://github.com/fortran-lang/fpm/pull/718> 中，将 homebrew 安装说明添加到 "
"README.md"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:33
msgid ""
"Some cleanups and minor fixes by in <https://github.com/fortran-"
"lang/fpm/pull/701>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/701> 中，一些清理和小修复"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:34
msgid ""
"feat: ability to read macros from manifest by in <https://github.com/fortran-"
"lang/fpm/pull/720>"
msgstr "特性：在 <https://github.com/fortran-lang/fpm/pull/720> 中，能够从清单中读取宏"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:35
msgid ""
"Support for dependency path relative to the fpm.toml it’s written in by in "
"<https://github.com/fortran-lang/fpm/pull/719>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/719> 中，支持相对于它所在的 fpm.toml 的依赖路径"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:36
msgid ""
"feat: added support for C++ files compilation by in <https://github.com"
"/fortran-lang/fpm/pull/733>"
msgstr "特性：在 <https://github.com/fortran-lang/fpm/pull/733> 中，添加了对 C++ 文件编译的支持"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:37
msgid "Fix executables linking by in <https://github.com/fortran-lang/fpm/pull/743>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/743> 中，修复可执行文件的链接"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:38
msgid ""
"Change git directory using work-tree / git-dir by in <https://github.com"
"/fortran-lang/fpm/pull/747>"
msgstr ""
"在 <https://github.com/fortran-lang/fpm/pull/747> 中，使用 work-tree / git-dir 更改 "
"git 目录"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:39
msgid ""
"Fix #734: First resolve dependencies, then resolve programs by in "
"<https://github.com/fortran-lang/fpm/pull/737>"
msgstr "修复 #734：在 <https://github.com/fortran-lang/fpm/pull/737> 中，首先处理依赖关系，然后处理主程序"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:40
msgid ""
"docs(README): improve Homebrew references by in <https://github.com/fortran-"
"lang/fpm/pull/745>"
msgstr "docs(README)：在 <https://github.com/fortran-lang/fpm/pull/745> 中，改进 Homebrew 参考"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:41
msgid "Minor fix for `fpm new` by in <https://github.com/fortran-lang/fpm/pull/739>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/739> 中，对 `fpm new` 的小修复"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:42
msgid ""
"docs: updated example packages README with new packages that were added by in"
" <https://github.com/fortran-lang/fpm/pull/740>"
msgstr "文档：在 <https://github.com/fortran-lang/fpm/pull/740> 中，添加的新包更新了示例包 README"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:43
msgid "Enable profiles in toml by in <https://github.com/fortran-lang/fpm/pull/653>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/653> 中，对 toml 启用配置文件"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:44
msgid ""
"Updated URL to manifest file in help section by in <https://github.com"
"/fortran-lang/fpm/pull/755>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/755> 中，更新了帮助部分中清单文件的 URL"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:45
msgid "Fix compilation with NAG by in <https://github.com/fortran-lang/fpm/pull/753>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/753> 中，使用 NAG 修复编译"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:46
msgid ""
"Fixes #756: add judgement of macros allocation status by in "
"<https://github.com/fortran-lang/fpm/pull/762>"
msgstr "修复 #756：在 <https://github.com/fortran-lang/fpm/pull/762> 中，添加对宏分配状态的判断"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:47
msgid ""
"In the default case of command line subcommands, stop `fpm` running in time "
"by in <https://github.com/fortran-lang/fpm/pull/728>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/728> 中，命令行子命令默认情况下，及时停止 `fpm` 运行"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:48
msgid ""
"Disallow C-style escaping for IBM XL compiler by in <https://github.com"
"/fortran-lang/fpm/pull/764>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/764> 中，禁止 IBM XL 编译器的 C 样式转义"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:49
msgid ""
"bug: C preprocessor does not propagate directives to executables by in "
"<https://github.com/fortran-lang/fpm/pull/775>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/775> 中，修复错误：C 预处理器不会将指令传播到可执行文件"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:50
msgid ""
"bug: macros don't propage to C executables by in <https://github.com/fortran-"
"lang/fpm/pull/779>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/779> 中，修复错误：宏不会传播到 C 可执行文件"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:51
msgid ""
"Enable cpp preprocessor flag for dependencies by in <https://github.com"
"/fortran-lang/fpm/pull/783>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/783> 中，为依赖项启用 cpp 预处理器标志"

#: ../../pages/news/2022/10-26-fpm-version-0.7.0.md:52
msgid "Bump version to 0.7.0 by in <https://github.com/fortran-lang/fpm/pull/785>"
msgstr "在 <https://github.com/fortran-lang/fpm/pull/785> 中，将版本提升到 0.7.0"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:7
msgid "Fpm version 0.8.0 released"
msgstr "Fpm 0.8.0 版本发布"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:9
msgid ""
"This release introduces support for enabling and disabling language features "
"in fpm, such as implicit typing or default source form. By default, fpm now "
"tries to disable implicit typing rules, implicit external interfaces and "
"assumes the source form is always free. The options can be overwritten in the"
" manifest for each project."
msgstr ""
"这个版本引入了对fpm中启用和禁用语言特性的支持，如隐式类型或默认源码形式。默认"
"情况下，fpm现在会尝试禁用隐式类型规则和隐式外部接口，并假定源码形式总是自由格"
"式的。这些选项可以在每个项目的清单中被覆盖。"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:13
msgid ""
"Furthermore, first support for local and remote registries are integrated in "
"fpm. The registry support can be configured in a new global configuration "
"file. This development was sponsored by the [Sovereign Tech "
"Fund](https://sovereigntechfund.de/en/projects/fortran/)."
msgstr ""
"此外，fpm中首次集成了对本地和远程注册表的支持。注册表的支持可以在一个新的全局"
"配置文件中进行配置。这项开发由[主权技术基金](https://sovereigntechfund.de/en/"
"projects/fortran/)赞助。"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:17
msgid ""
"Bugfixes and improvements to the preprocessor support, C++ compilation, "
"dependency updates and more are included in this release."
msgstr "该版本包括对预处理程序支持、C++编译、依赖性更新等方面的错误修正和改进。"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:19
msgid ""
"Find the full release notes [here](https://github.com/fortran-"
"lang/fpm/releases/tag/v0.8.0)."
msgstr ""
"在 [此处](https://github.com/fortran-lang/fpm/releases/tag/v0.8.0) "
"找到完整的发行说明。"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:21
msgid ""
"Many thanks to Aarush Bhat ([@sloorush](https://github.com/sloorush)), Minh "
"Dao ([@minhqdao](https://github.com/minhqdao)), Sebastian Ehlert "
"([@awvwgk](https://github.com/awvwgk)), Sergey Fedorov "
"([@barracuda156](https://github.com/barracuda156)), Sebastien Marie "
"([@semarie](https://github.com/semarie)), Giannis Nikiteas "
"([@gnikit](https://github.com/gnikit)), Federico Perini "
"([@perazz](https://github.com/perazz)), Ivan Pribec ([@ivan-"
"pi](https://github.com/ivan-pi)), John Urban "
"([@urbanjost](https://github.com/urbanjost)), Zuo Zhihua "
"([@zoziha](https://github.com/zoziha)) for contributing patches to this "
"release."
msgstr ""
"非常感谢Aarush Bhat（[@sloorush](https://github.com/sloorush)），Minh "
"Dao（[@minhqdao](https://github.com/minhqdao)），Sebastian "
"Ehlert（[@awvwgk](https://github.com/awvwgk)），Sergey "
"Fedorov（[@barracuda156](https://github.com/barracuda156)），Sebastien "
"Marie（[@semarie](https://github.com/semarie)），Giannis "
"Nikiteas（[@gnikit](https://github.com/gnikit)），Federico "
"Perini（[@perazz](https://github.com/perazz)），Ivan Pribec（[@ivan-"
"pi](https://github.com/ivan-pi)），John Urban（[@urbanjost](https://github."
"com/urbanjost)），Zuo Zhihua（[@zoziha](https://github.com/"
"zoziha)）为这个版本提供了补丁。"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:36
msgid ""
"Set C++ compiler to clang++ in [fpm#787](https://github.com/fortran-"
"lang/fpm/pull/787)"
msgstr ""
"在[fpm#787](https://github.com/fortran-lang/fpm/pull/"
"787)中设置C++编译器为clang++"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:37
msgid ""
"Document ``FPM_CXX``, ``FPM_CXXFLAGS`` and options in "
"[fpm#788](https://github.com/fortran-lang/fpm/pull/788)"
msgstr ""
"``FPM_CXX``，``FPM_CXXFLAGS``和[fpm#788](https://github.com/fortran-lang/fpm/"
"pull/788)中的选项写入文档"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:38
msgid ""
"Simplify and update README in [fpm#778](https://github.com/fortran-"
"lang/fpm/pull/778)"
msgstr "在[fpm#778](https://github.com/fortran-lang/fpm/pull/778)中简化并更新README"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:39
msgid ""
"Add C++ flags to profiles in [fpm#786](https://github.com/fortran-"
"lang/fpm/pull/786)"
msgstr "在[fpm#786](https://github.com/fortran-lang/fpm/pull/"
"786)中为配置文件添加C++标志"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:40
msgid ""
"fix 32-bit platform issues with M\\_CLI2 in [fpm#796](https://github.com"
"/fortran-lang/fpm/pull/796)"
msgstr ""
"修复[fpm#796](https://github.com/fortran-lang/fpm/pull/"
"796)中M_CLI2的32位平台问题"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:41
msgid ""
"Fix missing space before -D option for preprocessor in "
"[fpm#804](https://github.com/fortran-lang/fpm/pull/804)"
msgstr ""
"在[fpm#804](https://github.com/fortran-lang/fpm/pull/"
"804)中修复预处理器-D选项前缺失的空格"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:42
msgid ""
"Do not pass in quotes in manifest tests in [fpm#806](https://github.com"
"/fortran-lang/fpm/pull/806)"
msgstr "在[fpm#806](https://github.com/fortran-lang/fpm/pull/"
"806)中的清单测试中不要传入引号"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:43
msgid ""
"Improve error handling for invalid ``git`` dependencies in "
"[fpm#797](https://github.com/fortran-lang/fpm/pull/797)"
msgstr ""
"改进对[fpm#797](https://github.com/fortran-lang/fpm/pull/"
"797)中无效的``git``依赖关系的错误处理"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:44
msgid ""
"Lower windows check precedence in ``get_os_type`` function in "
"[fpm#802](https://github.com/fortran-lang/fpm/pull/802)"
msgstr ""
"在[fpm#802](https://github.com/fortran-lang/fpm/pull/"
"802)的``get_os_type``函数中降低窗口检查的优先级"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:45
msgid ""
"Fix broken links to webpage in [fpm#826](https://github.com/fortran-"
"lang/fpm/pull/826)"
msgstr "修复[fpm#826](https://github.com/fortran-lang/fpm/pull/826)中的失效的网页链接"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:46
msgid ""
"Consistently call ``execute_command_line`` from the ``run`` wrapper in "
"[fpm#832](https://github.com/fortran-lang/fpm/pull/832)"
msgstr ""
"在[fpm#832](https://github.com/fortran-lang/fpm/pull/"
"832)中从``run``包装器中一致地调用``execute_command_line``"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:47
msgid ""
"Fix the build on macOS PPC in [fpm#824](https://github.com/fortran-"
"lang/fpm/pull/824)"
msgstr ""
"修复[fpm#824](https://github.com/fortran-lang/fpm/pull/824)中的macOS "
"PPC上的构建"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:48
msgid ""
"Query latest release from GitHub in [fpm#818](https://github.com/fortran-"
"lang/fpm/pull/818)"
msgstr "在[fpm#818](https://github.com/fortran-lang/fpm/pull/"
"818)中查询GitHub上的最新版本"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:49
msgid ""
"Add missing dollar sign in OpenMP directive in [fpm#841](https://github.com"
"/fortran-lang/fpm/pull/841)"
msgstr ""
"在[fpm#841](https://github.com/fortran-lang/fpm/pull/"
"841)的OpenMP指令中添加缺失的美元符号"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:50
msgid ""
"Fix query for latest release from GitHub on missing curl in "
"[fpm#839](https://github.com/fortran-lang/fpm/pull/839) and "
"[fpm#842](https://github.com/fortran-lang/fpm/pull/842)"
msgstr ""
"在[fpm#839](https://github.com/fortran-lang/fpm/pull/"
"839)和[fpm#842](https://github.com/fortran-lang/fpm/pull/"
"842)中修正对GitHub最新发布版本中缺少curl的查询"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:51
msgid ""
"Fix unallocated model variables in the testsuite (#844) in "
"[fpm#845](https://github.com/fortran-lang/fpm/pull/845)"
msgstr ""
"在[fpm#845](https://github.com/fortran-lang/fpm/pull/"
"845)中修复测试套件中未分配的模型变量（#844）"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:52
msgid ""
"Add wait when linking library with \\*.resp file in "
"[fpm#808](https://github.com/fortran-lang/fpm/pull/808)"
msgstr ""
"在[fpm#808](https://github.com/fortran-lang/fpm/pull/808)中，使用``*."
"resp``文件库链接时增加等待"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:53
msgid ""
"Add option to enforce module naming in [fpm#828](https://github.com/fortran-"
"lang/fpm/pull/828)"
msgstr "在[fpm#828](https://github.com/fortran-lang/fpm/pull/"
"828)中增加强制模块命名的选项"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:54
msgid ""
"Fix unhandled error branch in [fpm#849](https://github.com/fortran-"
"lang/fpm/pull/849)"
msgstr "修复[fpm#849](https://github.com/fortran-lang/fpm/pull/849)中未处理的错误分支"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:55
msgid ""
"Automated dependency tree update in [fpm#843](https://github.com/fortran-"
"lang/fpm/pull/843)"
msgstr "在[fpm#843](https://github.com/fortran-lang/fpm/pull/843)中自动更新依赖关系树"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:56
msgid ""
"Return program's exit code from fpm run in [fpm#852](https://github.com"
"/fortran-lang/fpm/pull/852) and [fpm#](https://github.com/fortran-"
"lang/fpm/pull/858)"
msgstr ""
"返回在[fpm#852](https://github.com/fortran-lang/fpm/pull/"
"852)和[fpm#](https://github.com/fortran-lang/fpm/pull/"
"858)中运行的fpm的程序退出代码"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:57
msgid ""
"Update gcc version to 10 for CI in [fpm#857](https://github.com/fortran-"
"lang/fpm/pull/857)"
msgstr "在[fpm#857](https://github.com/fortran-lang/fpm/pull/"
"857)中为CI更新gcc版本至10"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:58
msgid ""
"Fix macOS CI for fpm-bootstrap executables built with gcc-9 in "
"[fpm#861](https://github.com/fortran-lang/fpm/pull/861)"
msgstr ""
"在[fpm#861](https://github.com/fortran-lang/fpm/pull/861)中为用gcc-"
"9构建的fpm-bootstrap可执行文件修复macOS CI"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:59
msgid ""
"Update TOML Fortran to version 0.4.0 in [fpm#862](https://github.com/fortran-"
"lang/fpm/pull/862)"
msgstr ""
"在[fpm#862](https://github.com/fortran-lang/fpm/pull/862)中更新TOML "
"Fortran到0.4.0版本"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:60
msgid ""
"Add support for toggling Fortran features in [fpm#864](https://github.com"
"/fortran-lang/fpm/pull/864)"
msgstr ""
"在[fpm#864](https://github.com/fortran-lang/fpm/pull/"
"864)中增加对切换Fortran功能的支持"

#: ../../pages/news/2023/04-07-fpm-version-0.8.0.md:61
msgid ""
"Add global configuration file and support local and remote registry "
"[fpm#817](https://github.com/fortran-lang/fpm/pull/817)"
msgstr ""
"增加全局配置文件，支持本地和远程注册表[fpm#817](https://github.com/"
"fortran-lang/fpm/pull/817)"

#: ../../pages/news/2023/04-11-fpm-version-0.8.1.md:7
msgid "Fpm version 0.8.1 released"
msgstr "Fpm 0.8.1版发布"

#: ../../pages/news/2023/04-11-fpm-version-0.8.1.md:9
msgid ""
"This release introduces a hotfix for the automated dependency tree feature "
"introduced in [v0.8.0](https://github.com/fortran-"
"lang/fpm/releases/tag/v0.8.0). Fpm now restored backward-compatible "
"dependency priority, which ensures that, whenever different versions of the "
"same dependency are found down the dependency tree, the first and foremost is"
" used. Unnecessary dependency updates are also shed from the build process."
msgstr ""
"这个版本为[v0.8.0](https://github.com/fortran-lang/fpm/releases/tag/v0.8.0)中"
"引入的自动依赖树功能引入了一个热修复。Fpm现在恢复了向后兼容的依赖性优先级，这"
"确保了当同一依赖性的不同版本在依赖树中被发现时，首先使用的是最重要的版本。不"
"必要的依赖性更新也从构建过程中剔除了。"

#: ../../pages/news/2023/04-11-fpm-version-0.8.1.md:13
msgid ""
"Find the full release notes [here](https://github.com/fortran-"
"lang/fpm/releases/tag/v0.8.1)."
msgstr "查看[这里](https://github.com/fortran-lang/fpm/releases/tag/v0.8."
"1)完整的发行说明。"

#: ../../pages/news/2023/04-11-fpm-version-0.8.1.md:15
msgid ""
"Many thanks to Sebastian Ehlert ([@awvwgk](https://github.com/awvwgk)), Brad "
"Richardson "
"([@everythingfunctional](https://github.com/everythingfunctional)), John "
"Urban ([@urbanjost](https://github.com/urbanjost)), for testing the new "
"release and allowing this hotfix to be deployed quickly."
msgstr ""
"非常感谢Sebastian Ehlert（[@awvwgk](https://github.com/awvwgk)），Brad "
"Richardson（[@everythingfunctional](https://github.com/"
"everythingfunctional)），John Urban ([@urbanjost](https://github.com/"
"urbanjost)），测试新版本并允许快速部署这个热修复。"

#: ../../pages/news/2023/04-11-fpm-version-0.8.1.md:23
msgid ""
"Only update dependencies between cached build and manifest (fix) by @perazz "
"in [fpm#871](https://github.com/fortran-lang/fpm/pull/871)"
msgstr ""
"由@perazz 在[fpm#871](https://github.com/fortran-lang/fpm/pull/"
"871)中只更新缓存构建和清单之间的依赖关系（修复）"

#: ../../pages/news/2023/04-11-fpm-version-0.8.1.md:24
msgid ""
"Print dependency update messages on verbosity>0 (fix) by @perazz in "
"[fpm#873](https://github.com/fortran-lang/fpm/pull/873)"
msgstr ""
"由@perazz在[fpm#873](https://github.com/fortran-lang/fpm/pull/"
"873)中：在verbosity>0时打印依赖性更新信息（修复）"

#: ../../pages/news/2023/04-11-fpm-version-0.8.1.md:25
msgid ""
"Automated dependency update: restore deterministic behavior by @perazz in "
"[fpm#875](https://github.com/fortran-lang/fpm/pull/875)"
msgstr ""
"由@perazz在[fpm#875](https://github.com/fortran-lang/fpm/pull/"
"875)中自动依赖性更新：恢复确定性行为"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:7
msgid "Fpm version 0.8.2 released"
msgstr "Fpm 0.8.2版发布"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:9
msgid "Registry preview release."
msgstr "登记处预览版。"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:11
msgid ""
"This release introduces fpm support for uploading packages to the fpm-"
"registry server directly from the command-line interface, via"
msgstr "这个版本引入了fpm支持，可以直接从命令行界面上传软件包到fpm-"
"registry服务器，通过"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:15
msgid ""
"fpm will now interact with a web interface that will help to manage the "
"namespaces & packages. The release includes furhter bugfixes and extensions "
"for C/C++ support as detailed in the changelog."
msgstr "fpm现在将与一个网络界面互动，这将有助于管理命名空间和软件包。该版本包括更多的"
"错误修正和对C/C++支持的扩展，详见更新日志。"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:18
msgid ""
"Thanks to [@minhqdao](https://github.com/minhqdao), "
"[@perazz](https://github.com/perazz) and everyone who contributed to this "
"release! This release was supported by the Sovereign Tech Fund "
"([STF](https://sovereigntechfund.de/de/))."
msgstr ""
"感谢[@minhqdao](https://github.com/minhqdao)、[@perazz](https://github.com/pe"
"razz)以及所有为这个版本做出贡献的人!这个版本得到了主权技术基金（[STF](https:/"
"/sovereigntechfund.de/de/)）的支持。"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:22
msgid "Not store temporary data in .local (#900) by @minhqdao"
msgstr "@minhqdao，不在.local中存储临时数据（#900）"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:23
msgid "Add flags to link main programs with C/C++ main (#896) by @perazz"
msgstr "添加标志，将主程序与C/C++主程序连接起来（#896），作者：@perazz"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:24
msgid "replace unix with is_unix to avoid intel fpp collisions (#894) by @perazz"
msgstr "用is_unix替换unix，以避免intel fpp的碰撞（#894），作者：@perazz"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:25
msgid "Fix bootstrapping on Windows (#892) by @minhqdao"
msgstr "修复Windows上的引导（#892），作者：@minhqdao"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:26
msgid "Improve error message for [build] structure errors (#890) by @perazz"
msgstr "改进[build]结构错误的错误信息（#890） 作者：@perazz"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:27
msgid "Fix multiple installs (#888) by @perazz"
msgstr "修复多重安装（#888），作者：@perazz"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:28
msgid "Fix --show-package-version (#887) by @minhqdao"
msgstr "修复 --show-package-version (#887)，作者：@minhqdao"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:29
msgid "Update Windows CI image compiler to MinGW gfortran 10.4.0 (#881) by @perazz"
msgstr "更新Windows CI图像编译器至MinGW gfortran 10.4.0（#881），作者：@perazz"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:30
msgid "Implement fpm publish (#876) by @minhqdao"
msgstr "实施fpm发布（#876），作者：@minhqdao"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:31
msgid "Automated dependency update: restore deterministic behavior (#875) by @perazz"
msgstr "自动依赖性更新：恢复确定性行为（#875），作者：@perazz"

#: ../../pages/news/2023/05-11-fpm-version-0.8.2.md:33
msgid ""
"**Full Changelog**: https://github.com/fortran-"
"lang/fpm/compare/v0.8.1...v0.8.2"
msgstr ""
"**完整的更改日志**: https://github.com/fortran-lang/fpm/compare/v0.8.1...v0.8"
".2"

#: ../../pages/registry/index.rst:4
msgid ""
"Welcome to the package registry for the Fortran package manager. All "
"currently registered packages can be found here."
msgstr "欢迎使用 Fortran 包管理器的包注册表，所有当前注册的包都可以在这里找到。"

#: ../../pages/registry/index.rst:9
msgid ""
"Your project is not listed? Submit a request at `fortran-lang/fpm-registry "
"<https://github.com/fortran-lang/fpm-registry>`_!"
msgstr ""
"你的项目未列出？在 `fortran-lang/fpm-registry <https://github.com/fortran-lang/fpm-"
"registry>` 中提交请求！"

#: ../../pages/spec/index.md:13
msgid "API documentation"
msgstr "API 文档"

#: ../../pages/spec/index.md:3
msgid "Specifications and Reference"
msgstr "规范和参考"

#: ../../pages/spec/index.md:6
msgid ""
"This section contains the specifications the components of the Fortran "
"Package Manager."
msgstr "本节包含Fortran包管理器组件的规范。"

#: ../../pages/spec/index.md:10
msgid ""
"The generated API documentation of the fpm internals can be found "
"[here](https://fortran-lang.github.io/fpm)."
msgstr ""
"fpm内部生成的API文档可在[https://fpm.fortran-lang.org](https://fortran-"
"lang.github.io/fpm)中找到。"

#: ../../pages/spec/manifest.md:1
msgid "Manifest reference"
msgstr "清单参考"

#: ../../pages/spec/manifest.md:3
msgid ""
"The ``fpm.toml`` file for each project is called its *manifest*. It is "
"written using the [TOML] format. Every manifest file consists of the "
"following sections:"
msgstr "每个项目的文件``fpm.toml``称为清单（*manifest*），它是使用[TOML格式](https://toml.io/cn/)编写的。每个清单文件都包含以下部分："

#: ../../pages/spec/manifest.md:7
msgid "[*name*](#project-name): The name of the project"
msgstr "[*name*](#project-name)：项目名称"

#: ../../pages/spec/manifest.md:9
msgid "[*version*](#project-version): The version of the project"
msgstr "[*version*](#project-version)：项目版本"

#: ../../pages/spec/manifest.md:11
msgid "[*license*](#project-license): The project license"
msgstr "[*license*](#project-license)：项目许可证"

#: ../../pages/spec/manifest.md:13
msgid "[*maintainer*](#project-maintainer): Maintainer of the project"
msgstr "[*maintainer*](#project-maintainer)：项目的维护者"

#: ../../pages/spec/manifest.md:15
msgid "[*author*](#project-author): Author of the project"
msgstr "[*author*](#project-author)：项目作者"

#: ../../pages/spec/manifest.md:17
msgid "[*copyright*](#project-copyright): Copyright of the project"
msgstr "[*copyright*](#project-copyright)：项目版权"

#: ../../pages/spec/manifest.md:19
msgid "[*description*](#project-description): Description of the project"
msgstr "[*description*](#project-description)：项目描述"

#: ../../pages/spec/manifest.md:21
msgid "[*categories*](#project-categories): Categories associated with the project"
msgstr "[*categories*](#project-categories)：与项目相关的类别"

#: ../../pages/spec/manifest.md:23
msgid "[*keywords*](#project-keywords): Keywords describing the project"
msgstr "[*keywords*](#project-keywords)：描述项目的关键词"

#: ../../pages/spec/manifest.md:25
msgid "[*homepage*](#project-homepage): The project's homepage"
msgstr "[*homepage*](#project-homepage)：项目主页"

#: ../../pages/spec/manifest.md:27
msgid "Build configuration:"
msgstr "构建（*build*）配置："

#: ../../pages/spec/manifest.md:28
msgid ""
"[*auto-tests*](#automatic-target-discovery): Toggle automatic discovery of "
"test executables"
msgstr "[*auto-tests*](#automatic-target-discovery)：切换测试程序的自动发现"

#: ../../pages/spec/manifest.md:30
msgid ""
"[*auto-examples*](#automatic-target-discovery): Toggle automatic discovery of"
" example programs"
msgstr "[*auto-examples*](#automatic-target-discovery)：切换示例程序的自动发现"

#: ../../pages/spec/manifest.md:32
msgid ""
"[*auto-executables*](#automatic-target-discovery): Toggle automatic discovery"
" of executables"
msgstr "[*auto-executables*](#automatic-target-discovery)：切换应用程序的自动发现"

#: ../../pages/spec/manifest.md:34
msgid "[*link*](#link-external-libraries): Link with external dependencies"
msgstr "[*link*](#link-external-libraries)：与外部依赖项的链接"

#: ../../pages/spec/manifest.md:36
msgid ""
"[*external-modules*](#use-system-installed-modules): Specify modules used "
"that are not within your fpm package"
msgstr "[*external-modules*](#use-system-installed-modules)：指定不在fpm包中使用的模块"

#: ../../pages/spec/manifest.md:38
msgid "Fortran configuration:"
msgstr "Fortran配置："

#: ../../pages/spec/manifest.md:39
msgid "[*implicit-typing*](#implicit-typing): Toggle default implicit typing"
msgstr "[*implicit-typing*](#implicit-typing)：切换默认的隐式类型声明"

#: ../../pages/spec/manifest.md:41
msgid "[*implicit-external*](#implicit-external): Toggle implicit external interfaces"
msgstr "[*implicit-external*](#implicit-external)：切换隐式外部接口"

#: ../../pages/spec/manifest.md:43
msgid "[*source-form*](#source-form): Select source form for project"
msgstr "[*source-form*](#source-form)：选择项目的源形式"

#: ../../pages/spec/manifest.md:45
msgid "Target sections:"
msgstr "目标部分："

#: ../../pages/spec/manifest.md:46
msgid "[*library*](#library-configuration) Configuration of the library target"
msgstr "[*library*](#library-configuration)：函数库目标的配置"

#: ../../pages/spec/manifest.md:48
msgid "[*executable*](#executable-targets) Configuration of the executable targets"
msgstr "[*executable*](#executable-targets)：应用程序目标的配置"

#: ../../pages/spec/manifest.md:50
msgid "[*test*](#test-targets) Configuration of the test targets"
msgstr "[*test*](#test-targets)：测试程序目标的配置"

#: ../../pages/spec/manifest.md:52
msgid "Dependency sections:"
msgstr "依赖项（*dependencies*）部分："

#: ../../pages/spec/manifest.md:53
msgid "[*dependencies*](#specifying-dependencies): Project library dependencies"
msgstr "[*dependencies*](#specifying-dependencies)：项目库依赖项Projekts"

#: ../../pages/spec/manifest.md:55
msgid ""
"[*dev-dependencies*](#development-dependencies): Dependencies only needed for"
" tests"
msgstr "[*dev-dependencies*](#development-dependencies)：仅测试需要的依赖关系"

#: ../../pages/spec/manifest.md:57
msgid "[*install*](#installation-configuration): Installation configuration"
msgstr "[*install*](#installation-configuration)：安装配置"

#: ../../pages/spec/manifest.md:59
msgid "[*preprocess*](#preprocessor-configuration) Preprocessor configuration"
msgstr "[*preprocess*](#preprocessor-configuration) 预处理器配置"

#: ../../pages/spec/manifest.md:61
msgid "[*extra*](#additional-free-data-field): Additional free data field"
msgstr "[*extra*](#additional-free-data-field)：额外的自由数据字段"

#: ../../pages/spec/manifest.md:68
msgid "Project name"
msgstr "项目名称"

#: ../../pages/spec/manifest.md:70
msgid ""
"The project name identifies the package and is used to refer to it. It is "
"used when listing the project as dependency for another package and the "
"default name of the library and executable target. Therefore, the project "
"name must always be present."
msgstr "项目名称标识包并用于引用包。在将项目列为另一个包的依赖项以及库和可执行目标的默认名称时，将使用它。因此，项目名称必须始终存在。"

#: ../../pages/spec/manifest.md:74 ../../pages/spec/manifest.md:86
#: ../../pages/spec/manifest.md:94 ../../pages/spec/manifest.md:129
#: ../../pages/spec/manifest.md:140 ../../pages/spec/manifest.md:151
#: ../../pages/spec/manifest.md:163 ../../pages/spec/manifest.md:174
#: ../../pages/spec/manifest.md:185 ../../pages/spec/manifest.md:196
#: ../../pages/spec/manifest.md:216 ../../pages/spec/manifest.md:234
#: ../../pages/spec/manifest.md:265 ../../pages/spec/manifest.md:309
#: ../../pages/spec/manifest.md:345 ../../pages/spec/manifest.md:372
#: ../../pages/spec/manifest.md:400 ../../pages/spec/manifest.md:409
#: ../../pages/spec/naming.md:157
msgid "*Example:*"
msgstr "*例如：*"

#: ../../pages/spec/manifest.md:81
msgid "Project version"
msgstr "项目版本"

#: ../../pages/spec/manifest.md:83
msgid ""
"The version number of the project is specified as string. A standardized way "
"to manage and specify versions is the [Semantic Versioning] scheme."
msgstr "项目的版本号指定为字符串。管理和指定版本的标准化方法是[语义版本控制](https://semver.org/lang/zh-CN/)方案。"

#: ../../pages/spec/manifest.md:92
msgid ""
"The version entry can also contain a filename relative to the project root, "
"which contains the version number of the project"
msgstr "版本条目还可以包含相对于项目根目录的文件名，其中包含项目的版本号:"

#: ../../pages/spec/manifest.md:103
msgid "Project license"
msgstr "项目许可证"

#: ../../pages/spec/manifest.md:105
msgid ""
"The project license field contains the license identifier. A standardized way"
" to specify licensing information are [SPDX] identifiers."
msgstr "项目许可字段包含许可标识符。指定许可信息的标准化方法是[SPDX]标识符。"

#: ../../pages/spec/manifest.md:108
msgid "*Examples:*"
msgstr "*例如：*"

#: ../../pages/spec/manifest.md:110
msgid ""
"Projects licensed under the [GNU Lesser General Public "
"License](https://www.gnu.org/licenses/lgpl-3.0-standalone.html), either "
"version 3 or any later version, is specified as"
msgstr ""
"根据[ GNU 宽通用公共许可证（版本 3 "
"或任何更高版本）许可](https://www.gnu.org/licenses/lgpl-3.0-standalone.html)的项目被指定为："

#: ../../pages/spec/manifest.md:116
msgid ""
"Dual licensed project under the [Apache license, version "
"2.0](http://www.apache.org/licenses/LICENSE-2.0) or the [MIT "
"license](https://opensource.org/licenses/MIT) are specified as"
msgstr ""
"[Apache 许可证——版本 2.0 ](http://www.apache.org/licenses/LICENSE-2.0)或[ MIT "
"许可证](https://opensource.org/licenses/MIT)下的双重许可项目被指定为："

#: ../../pages/spec/manifest.md:125
msgid "Project maintainer"
msgstr "项目维护者"

#: ../../pages/spec/manifest.md:127
msgid "Information on the project maintainer and means to reach out to them."
msgstr "有关项目维护者的信息以及与他们的联系方式。"

#: ../../pages/spec/manifest.md:136
msgid "Project author"
msgstr "项目作者"

#: ../../pages/spec/manifest.md:138
msgid "Information on the project author."
msgstr "有关项目作者的信息。"

#: ../../pages/spec/manifest.md:147
msgid "Project copyright"
msgstr "项目版权"

#: ../../pages/spec/manifest.md:149
msgid "A statement clarifying the copyright status of the project."
msgstr "澄清项目版权状态的声明。"

#: ../../pages/spec/manifest.md:158
msgid "Project description"
msgstr "项目描述"

#: ../../pages/spec/manifest.md:160
msgid ""
"The description provides a short summary on the project. It should be plain "
"text and not using any markup formatting."
msgstr "该说明提供了有关项目的简短摘要。它应该是纯文本，不使用任何标记格式。"

#: ../../pages/spec/manifest.md:170
msgid "Project categories"
msgstr "项目类别"

#: ../../pages/spec/manifest.md:172
msgid "The project can be associated with different categories."
msgstr "项目可以与不同的类别相关联。"

#: ../../pages/spec/manifest.md:181
msgid "Project keywords"
msgstr "项目关键词"

#: ../../pages/spec/manifest.md:183
msgid "The keywords field is an array of strings describing the project."
msgstr "关键词字段是描述项目的字符串数组。"

#: ../../pages/spec/manifest.md:192
msgid "Project homepage"
msgstr "项目主页"

#: ../../pages/spec/manifest.md:194
msgid "URL to the webpage of the project."
msgstr "指向项目网页的URL。"

#: ../../pages/spec/manifest.md:203
msgid "Project targets"
msgstr "项目目标"

#: ../../pages/spec/manifest.md:205
msgid ""
"Every fpm project can define library, executable and test targets. Library "
"targets are exported and useable for other projects."
msgstr "每个fpm项目都可以定义函数库、可执行程序和测试目标。库目标被导出并可用于其它项目。"

#: ../../pages/spec/manifest.md:209
msgid "Library configuration"
msgstr "库配置"

#: ../../pages/spec/manifest.md:211
msgid ""
"Defines the exported library target of the project. A library is generated if"
" the source directory or include directory is found in a project. The default"
" source and include directories are ``src`` and ``include``; these can be "
"modified in the *library* section using the *source-dir* and *include-dir* "
"entries. Paths for the source and include directories are given relative to "
"the project root and use ``/`` as path separator on all platforms."
msgstr ""
"定义项目的导出库目标。如果在项目中找到源目录或包含目录，则会生成库。默认的源目录和包含目录是``src``和``include``；这些可以在库（*library*）部分中使用源目录"
"（*source-dir*）和包含目录（*include-"
"dir*）条目进行修改。源目录和包含目录的目录相对于项目根目录给出，并在所有平台上使用``/``用作目录分隔符。"

#: ../../pages/spec/manifest.md:224
msgid "Include directory"
msgstr "包含目录"

#: ../../pages/spec/manifest.md:227 ../../pages/spec/manifest.md:364
#: ../../pages/spec/manifest.md:419
msgid "Supported in Fortran fpm only"
msgstr "仅在Fortran fpm中受支持"

#: ../../pages/spec/manifest.md:230
msgid ""
"Projects which use the Fortran `include` statement or C preprocessor "
"`#include` statement, can use the *include-dir* key to specify search "
"directories for the included files. *include-dir* can contain one or more "
"directories, where multiple directories are specified using a list of "
"strings. Include directories from all project dependencies are passed to the "
"compiler using the appropriate compiler flag."
msgstr ""
"使用 Fortran `include` 语句或 C 预处理器 `#include` 语句的项目可以使用包含目录（*include-"
"dir*）键为包含的文件指定搜索目录。包含目录（*include-"
"dir*）可以包含一个或多个目录，其中使用字符串列表指定多个目录。所有项目依赖项中的包含目录都使用相应的编译器标志传递给编译器。"

#: ../../pages/spec/manifest.md:242
msgid "*include-dir* does not currently allow using pre-built module `.mod` files"
msgstr "包含目录（*include-dir*）当前不允许使用预构建的`.mod`模块文件"

#: ../../pages/spec/manifest.md:246
msgid "Executable targets"
msgstr "可执行目标"

#: ../../pages/spec/manifest.md:248
msgid ""
"Executable targets are Fortran programs defined as *executable* sections. If "
"no executable section is specified the ``app`` directory is searched for "
"program definitions. For explicitly specified executables the *name* entry "
"must always be specified. The source directory for each executable can be "
"adjusted in the *source-dir* entry. Paths for the source directory are given "
"relative to the project root and use ``/`` as path separator on all "
"platforms. The source file containing the program body can be specified in "
"the *main* entry."
msgstr ""
"可执行目标是定义为可执行部分的Fortran程序。如果未指定可执行文件（*executable*）部分，则会在``app``目录中搜索程序定义。对于显式指定的可执行文件，必须始终指定名称（*name*）条目。每个可执行文件的源目录都可以在源目录"
"（*source-"
"dir*）条目中进行调整。源目录的路径是相对于项目根目录给出的，并在所有平台上使用``/``用作路径分隔符。可以在主（*main*）条目中指定包含程序正文的源文件。"

#: ../../pages/spec/manifest.md:255
msgid ""
"Executables can have their own dependencies. See [specifying dependencies"
"](#specifying-dependencies) for more details."
msgstr "可执行文件可以有自己的依赖项。有关更多详细信息，请参阅[指定依赖项](#specifying-dependencies)。"

#: ../../pages/spec/manifest.md:258
msgid ""
"Executables can also specify their own external library dependencies. See "
"[external libraries](#link-external-libraries) for more details."
msgstr "可执行文件还可以指定自己的外部库依赖项。有关更多详细信息，请参阅[外部库](#link-external-libraries)。"

#: ../../pages/spec/manifest.md:262 ../../pages/spec/manifest.md:306
#: ../../pages/spec/manifest.md:342
msgid "Linking against libraries is supported in Fortran fpm only"
msgstr "仅在Fortran fpm中支持针对库的链接"

#: ../../pages/spec/manifest.md:280
msgid ""
"Specifying many separate executables can be done by using inline tables for "
"brevity instead"
msgstr "指定许多单独的可执行文件可以通过使用内联表来完成，以便简洁"

#: ../../pages/spec/manifest.md:290
msgid "Example targets"
msgstr "示例目标"

#: ../../pages/spec/manifest.md:292
msgid ""
"Example applications for a project are defined as *example* sections. If no "
"example section is specified the ``example`` directory is searched for "
"program definitions. For explicitly specified examples the *name* entry must "
"always be specified. The source directory for each example can be adjusted in"
" the *source-dir* entry. Paths for the source directory are given relative to"
" the project root and use ``/`` as path separator on all platforms. The "
"source file containing the program body can be specified in the *main* entry."
msgstr ""
"项目的示例应用程序被定义为示例部分。如果未指定示例（*example*）部分，则会在``example``目录中搜索程序定义。对于显式指定的示例，必须始终指定名称（*name*）条目。每个示例的源目录都可以在源目录"
"（*source-"
"dir*）条目中进行调整。源目录的路径是相对于项目根目录给出的，并在所有平台上使用``/``用作路径分隔符。可以在主（*main*）条目中指定包含程序正文的源文件。"

#: ../../pages/spec/manifest.md:299
msgid ""
"Examples can have their own dependencies. See [specifying dependencies"
"](#specifying-dependencies) for more details."
msgstr "可执行文件可以有自己的依赖项。有关更多详细信息，请参阅[指定依赖项](#specifying-dependencies)。"

#: ../../pages/spec/manifest.md:302
msgid ""
"Examples can also specify their own external library dependencies. See "
"[external libraries](#link-external-libraries) for more details."
msgstr "可执行文件还可以指定自己的外部库依赖项。有关更多详细信息，请参阅[外部库](#link-external-libraries)。"

#: ../../pages/spec/manifest.md:325
msgid "Test targets"
msgstr "测试目标"

#: ../../pages/spec/manifest.md:327
msgid ""
"Test targets are Fortran programs defined as *test* sections. They follow "
"similar rules as the executable targets. If no test section is specified the "
"``test`` directory is searched for program definitions. For explicitly "
"specified tests the *name* entry must always be specified. The source "
"directory for each test can be adjusted in the *source-dir* entry. Paths for "
"the source directory are given relative to the project root and use ``/`` as "
"path separator on all platforms. The source file containing the program body "
"can be specified in the *main* entry."
msgstr ""
"测试目标是定义为测试部分的Fortran程序。它们遵循与可执行目标类似的规则。如果未指定测试（*test*）部分，则会在``test``目录中搜索程序定义。对于显式指定的测试，必须始终指定名称（*name*）条目。每个测试的源目录都可以在源目录"
"（*source-"
"dir*）条目中进行调整。源目录的路径是相对于项目根目录给出的，并在所有平台上使用``/``用作路径分隔符。可以在主（*main*）条目中指定包含程序正文的源文件。"

#: ../../pages/spec/manifest.md:335
msgid ""
"Tests can have their own dependencies. See [specifying dependencies"
"](#specifying-dependencies) for more details."
msgstr "可执行文件可以有自己的依赖项。有关更多详细信息，请参阅[指定依赖项](#specifying-dependencies)。"

#: ../../pages/spec/manifest.md:338
msgid ""
"Tests can also specify their own external library dependencies. See [external"
" libraries](#link-external-libraries) for more details."
msgstr "可执行文件还可以指定自己的外部库依赖项。有关更多详细信息，请参阅[外部库](#link-external-libraries)。"

#: ../../pages/spec/manifest.md:361
msgid "Link external libraries"
msgstr "链接外部库"

#: ../../pages/spec/manifest.md:367
msgid ""
"To declare link time dependencies on external libraries a list of native "
"libraries can be specified in the *link* entry. Specify either one library as"
" string or a list of strings in case several libraries should be linked. When"
" possible the project should only link one native library. The list of "
"library dependencies is exported to dependent packages."
msgstr "要声明外部库的链接时间依赖关系，可以在链接（*link*）条目中指定本机库的列表。将一个库指定为字符串，或指定一个字符串列表，以防应链接多个库。如果可能，项目应仅链接一个本机库。库依赖项列表将导出到从属包。"

#: ../../pages/spec/manifest.md:374
msgid "To link against the zlib compression library use"
msgstr "使用 zlib 链接库"

#: ../../pages/spec/manifest.md:381
msgid ""
"To dependent on LAPACK also BLAS should be linked. In this case the order of "
"the libraries matters:"
msgstr "要依赖LAPACK，BLAS也应该被链接起来。在这种情况下，库的顺序很重要："

#: ../../pages/spec/manifest.md:389
msgid "Use system-installed modules"
msgstr "使用系统安装的模块"

#: ../../pages/spec/manifest.md:391
msgid ""
"To use modules that are not defined within your fpm package or its "
"dependencies, specify the module name using the *external-modules* key in the"
" *build* table."
msgstr "若要使用未在fpm包或其依赖项中定义的模块，请使用生成（*build*）表中的外部模块（*external-modules*）键指定模块名称。"

#: ../../pages/spec/manifest.md:395
msgid ""
"*fpm* cannot automatically locate external module files; it is the "
"responsibility of the user to specify the necessary include directories using"
" compiler flags such that the compiler can locate external module files "
"during compilation."
msgstr "*fpm*无法自动定位外部模块文件；用户有责任使用编译器标志指定必要的包含目录，以便编译器可以在编译期间找到外部模块文件。"

#: ../../pages/spec/manifest.md:407
msgid "Multiple external modules can be specified as a list."
msgstr "可以将多个外部模块指定为一个列表。"

#: ../../pages/spec/manifest.md:416
msgid "Automatic target discovery"
msgstr "目标自动发现"

#: ../../pages/spec/manifest.md:422
msgid ""
"Executables and test can be discovered automatically in their default "
"directories. The automatic discovery recursively searches the ``app``, "
"``example``, and ``test`` directories for ``program`` definitions and "
"declares them as executable, example, and test targets, respectively. The "
"automatic discovery is enabled by default."
msgstr "可执行文件和测试可以在其默认目录中自动发现。自动发现以递归方式在``app``、``example``和``test``目录中搜索定义，并分别将它们声明为可执行目标、示例目标和测试目标。默认情况下，自动发现处于启用状态。"

#: ../../pages/spec/manifest.md:426
msgid ""
"To disable the automatic discovery of targets set the *auto-executables*, "
"*auto-examples*, and *auto-tests* entry to *false*."
msgstr ""
"要禁用目标的自动发现，请将自动可执行文件（*auto-executables*）、自动示例（*auto-examples*）和自动测试（*auto-"
"tests*）条目设置为*false*。"

#: ../../pages/spec/manifest.md:436
msgid "Fortran features"
msgstr "Fortran特性"

#: ../../pages/spec/manifest.md:438
msgid "Allows to enable and disable specific language features"
msgstr "允许启用和禁用特定的语言功能"

#: ../../pages/spec/manifest.md:441
msgid "Implicit typing"
msgstr "隐性类型声明"

#: ../../pages/spec/manifest.md:443
msgid ""
"Allows to toggle whether the default implicit typing should be used. The "
"default option is ``false``."
msgstr "允许切换是否应该使用默认的隐式类型声明。默认选项是``false``。"

#: ../../pages/spec/manifest.md:452
msgid "Implicit external"
msgstr "隐式外部接口"

#: ../../pages/spec/manifest.md:454
msgid ""
"Allows to toggle whether external interfaces can be declared implicitly. The "
"default option is ``false``."
msgstr "允许切换是否可以隐式声明外部接口。默认选项是``false``。"

#: ../../pages/spec/manifest.md:463
msgid "Source form"
msgstr "源文件格式"

#: ../../pages/spec/manifest.md:465
msgid ""
"Allows to specifiy the source form to be used for all files in the project. "
"Possible choices are ``\"free\"`` to assume all files are free form source, "
"``\"fixed\"`` to assume all files are fixed form source, and ``\"default\"`` "
"to let the compiler decide based on its own heuristics. The default option is"
" ``\"free\"``."
msgstr ""
"允许指定项目中所有文件使用的源码形式。可能的选择是``\"free\""
"``假设所有文件都是自由形式的源代码，``\"fixed\""
"``假设所有文件都是固定形式的源代码，``\"default\""
"``让编译器根据自己的启发式方法来决定。默认选项是 ``\"free\"``。"

#: ../../pages/spec/manifest.md:477
msgid "Specifying dependencies"
msgstr "指定依赖项"

#: ../../pages/spec/manifest.md:479
msgid ""
"Dependencies can be declared in the *dependencies* table in the manifest root"
" or the [*executable*](#executable-targets) or [*test*](#test-targets) "
"sections. When declared in the manifest root the dependencies are exported "
"with the project."
msgstr ""
"可以在清单根或可执行文件（[*executable*](#executable-targets)）或测试（[*test*](#test-"
"targets)）部分的依赖项（*dependencies*）表中声明依赖项。在清单根目录中声明时，依赖项将与项目一起导出。"

#: ../../pages/spec/manifest.md:483
msgid "Local dependencies"
msgstr "本地依赖项"

#: ../../pages/spec/manifest.md:485
msgid "To declare local dependencies use the *path* entry."
msgstr "若要声明本地依赖项，请使用路径（*path*）条目。"

#: ../../pages/spec/manifest.md:492
msgid ""
"The local dependency path is given relative to the ``fpm.toml`` it is written"
" to, and uses ``/`` as the path separator on all platforms."
msgstr "本地依赖路径是相对于写入它的 ``fpm.toml`` 给出的，并在所有平台上使用 ``/`` 作为路径分隔符。"

#: ../../pages/spec/manifest.md:494
msgid "Global config file"
msgstr "全局配置文件"

#: ../../pages/spec/manifest.md:496
msgid ""
"The global configuration file can be used to set default options across all "
"fpm projects on the system. It is, by default, located at "
"`~/.local/share/fpm/config.toml` on Unix-like machines and "
"`%APPDATA%\\local\\fpm\\config.toml` on Windows and must be parsable to a "
"TOML structure. It can be used to configure [registry settings](#registry-"
"settings)."
msgstr ""
"全局配置文件可用于设置系统中所有fpm项目的默认选项。默认情况下，它位于Unix-"
"like机器上的`~/.local/share/fpm/config.toml`和Windows上的`%APPDATA%\\local"
"\\fpm/config.toml`，并且必须可解析为TOML结构。它可以用来配置[注册表设置"
"](#registry-settings)。"

#: ../../pages/spec/manifest.md:498
msgid "Registry settings"
msgstr "注册表设置"

#: ../../pages/spec/manifest.md:500
msgid ""
"The registry settings can be used to customize the registry for all projects."
" If no registry is specified, the packages will be fetched via HTTP from the "
"[official registry](https://registry-frontend.vercel.app/). The registry "
"settings are specified in the [global config file](#global-config-file)."
msgstr ""
"注册表设置可以用来为所有项目定制注册表。如果没有指定注册表，软件包将通过HTTP"
"从[官方注册表](https://registry-frontend.vercel.app/"
")获取。注册表设置在[全局配置文件](#global-config-file)中指定。"

#: ../../pages/spec/manifest.md:502
msgid "Registry cache"
msgstr "注册表缓存"

#: ../../pages/spec/manifest.md:504
msgid ""
"The registry cache contains the source code of previously downloaded "
"packages. It will first be searched for existing packages that satify the "
"requirements of the requesting project before the package is downloaded. The "
"default cache location is `~/.local/share/fpm/dependencies` on Unix-like "
"machines and `%APPDATA%\\local\\fpm\\dependencies` on Windows. The location "
"of the cache can be changed by setting the `cache_path` in the global config "
"file:"
msgstr ""
"注册表缓存包含以前下载的软件包的源代码。在下载软件包之前，它将首先搜索符合请"
"求项目要求的现有软件包。默认的缓存位置在类似Unix的机器上是`~/.local/share/"
"fpm/dependencies`，在Windows上是`%APPDATA%/local/fpm/"
"dependencies`。缓存的位置可以通过在全局配置文件中设置`cache_path`来改变："

#: ../../pages/spec/manifest.md:512
msgid "Custom registry"
msgstr "自定义注册表"

#: ../../pages/spec/manifest.md:514
msgid ""
"If you want to use a custom registry, you can specify it in the global config"
" file:"
msgstr "如果你想使用一个自定义的注册表，你可以在全局配置文件中指定它："

#: ../../pages/spec/manifest.md:521
msgid ""
"Your registry must implement the same [API](https://registry-"
"apis.vercel.app/apidocs/) as the official registry."
msgstr "你的注册表必须实现与官方注册表相同的[API](https://registry-apis.vercel.app/"
"apidocs/)。"

#: ../../pages/spec/manifest.md:523
msgid "Local registry"
msgstr "本地注册表"

#: ../../pages/spec/manifest.md:525
msgid "Use the following configuration if you want to set up a local registry:"
msgstr "如果你想设置一个本地注册表，请使用以下配置："

#: ../../pages/spec/manifest.md:532
msgid ""
"fpm will search this directory for packages and will not download packages "
"from the internet or fetch packages from the cache."
msgstr "fpm会在这个目录下搜索软件包，而不会从互联网上下载软件包或从缓存中获取软件包。"

#: ../../pages/spec/manifest.md:534
msgid ""
"The directory must be structured the way fpm expects it to be. A package must"
" be located in a directory named after the namespace name, followed by the "
"name of the package and the package version. For example, the package `my-"
"package` with version `0.1.0`, which is part of `my-namespace`, must be "
"located in the directory `<path_to_local_registry>/my-namespace/my-"
"package/0.1.0` on Unix-like systems. The package directory must contain an "
"`fpm.toml` file that has the package metadata. The manifest must therefore be"
" located at `<path_to_local_registry>/my-namespace/my-"
"package/0.1.0/fpm.toml`."
msgstr ""
"该目录必须按照fpm所期望的方式来结构化。一个软件包必须位于以命名空间名称命名的"
"目录中，后面是软件包的名称和软件包的版本。例如，版本为`0.1.0'的`my-"
"package`包是`my-"
"namespace`的一部分，在类似Unix的系统中必须位于`<path_to_local_registry>/my-"
"namespace/my-package/0.1.0`目录下。软件包目录必须包含一个`fpm."
"toml`文件，其中有软件包元数据。因此，清单必须位于`<path_to_local_registry"
">/my-namespace/my-package/0.1.0/fpm.toml`。"

#: ../../pages/spec/manifest.md:536
msgid ""
"If a specific [version](#version) is requested, fpm will look for that "
"version in the local registry. If you do not specify a version, fpm will look"
" for the version with the highest precedence."
msgstr "如果要求一个特定的[版本](#version)，fpm将在本地注册表中寻找该版本。如果你没有"
"指定一个版本，fpm将寻找优先级最高的版本。"

#: ../../pages/spec/manifest.md:538
msgid "Dependencies from version control systems"
msgstr "来自版本控制系统的依赖关系"

#: ../../pages/spec/manifest.md:540
msgid "Dependencies can be specified by the projects git repository."
msgstr "依赖项可以由项目git存储库指定。"

#: ../../pages/spec/manifest.md:547
msgid "To use a specific upstream branch declare the *branch* name with"
msgstr "要使用特定的上游分支（*branch*），请使用"

#: ../../pages/spec/manifest.md:554
msgid "Alternatively, reference tags by using the *tag* entry"
msgstr "或者，使用标签条目引用标签（*tag*）"

#: ../../pages/spec/manifest.md:561
msgid "To pin a specific revision specify the commit hash in the *rev* entry"
msgstr "要固定特定修订版，请在修订版（*rev*）条目中指定提交哈希"

#: ../../pages/spec/manifest.md:568
msgid ""
"For more verbose layout use normal tables rather than inline tables to "
"specify dependencies"
msgstr "对于更详细的布局，请使用普通表而不是内联表来指定依赖项"

#: ../../pages/spec/manifest.md:576
msgid "Dependencies from a registry"
msgstr "来自注册表的依赖性"

#: ../../pages/spec/manifest.md:578 ../../pages/spec/publish.md:13
msgid "Namespace"
msgstr "命名空间"

#: ../../pages/spec/manifest.md:580
msgid ""
"Packages obtained from a registry (both remote and local) are required to "
"specify a namespace, which provides a way to uniquely identify and "
"differentiate packages with identical names. The namespace is declared in the"
" manifest (`fpm.toml`)."
msgstr ""
"从注册中心获得的包（包括远程和本地）需要指定一个命名空间，它提供了一种唯一识"
"别和区分名称相同的包的方法。命名空间在清单（`fpm.toml`）中声明。"

#: ../../pages/spec/manifest.md:587
msgid ""
"This will prompt fpm to download the newest version of \"my-package\", which "
"belongs to \"my-namespace\", from the registry."
msgstr "这将促使fpm从注册表中下载属于 \"my-namespace\"的 \"my-package\"的最新版本。"

#: ../../pages/spec/manifest.md:589 ../../pages/spec/publish.md:21
msgid "Version"
msgstr "版本"

#: ../../pages/spec/manifest.md:591
msgid ""
"If you want to download a specific version of a package instead of the newest"
" one available, you can specify the version (`v`) in the manifest."
msgstr "如果你想下载一个特定版本的软件包，而不是最新的可用版本，你可以在清单中指定版"
"本（`v`）。"

#: ../../pages/spec/manifest.md:599
msgid "Development dependencies"
msgstr "开发依赖关系"

#: ../../pages/spec/manifest.md:601
msgid ""
"Development dependencies allow to declare *dev-dependencies* in the manifest "
"root, which are available to all tests but not exported with the project."
msgstr "开发依赖项允许在清单根目录中声明开发依赖项（*dev-dependencies*），这些依赖项可用于所有测试，但不能随项目一起导出。"

#: ../../pages/spec/manifest.md:604
msgid "Installation configuration"
msgstr "安装配置"

#: ../../pages/spec/manifest.md:606
msgid ""
"In the *install* section components for the installation can be selected. By "
"default only executables are installed, library projects can set the "
"*library* boolean to also installatation the module files and the archive."
msgstr "在安装（*install*）部分中，可以选择安装的组件。默认情况下，仅安装可执行文件，库项目可以将库（*library*）布尔值设置为同时安装模块文件和归档文件。"

#: ../../pages/spec/manifest.md:609 ../../pages/spec/manifest.md:625
#: ../../pages/spec/manifest.md:634 ../../pages/spec/manifest.md:644
#: ../../pages/spec/manifest.md:654 ../../pages/spec/manifest.md:664
#: ../../pages/spec/manifest.md:674 ../../pages/spec/manifest.md:685
#: ../../pages/spec/manifest.md:694
msgid "*Example*"
msgstr "*例如：*"

#: ../../pages/spec/manifest.md:616
msgid "Preprocessor configuration"
msgstr "预处理器配置"

#: ../../pages/spec/manifest.md:618
msgid ""
"Under the *preprocess* section, you can specify one or more preprocessor to "
"use in an fpm project."
msgstr "在 *preprocess* 部分下，你可以指定一个或多个预处理器以在 fpm 项目中使用。"

#: ../../pages/spec/manifest.md:620
msgid "Specifying the preprocessor"
msgstr "指定预处理器"

#: ../../pages/spec/manifest.md:622
msgid ""
"The *preprocess* section allows one or more preprocessors to be specified. "
"For example, ```cpp``` can be specified like this :"
msgstr "*preprocess* 部分允许指定一个或多个预处理器。例如，```cpp``` 可以这样指定："

#: ../../pages/spec/manifest.md:632
msgid ""
"To use multiple preprocessors, for example ```cpp``` and ```fypp```, specify "
"them like this:"
msgstr "要使用多个预处理器，例如 ```cpp``` 和 ```fypp```，请像这样指定它们："

#: ../../pages/spec/manifest.md:642
msgid "You can also specify source file suffixes that the preprocessor should run on:"
msgstr "你还可以指定预处理器应在其上运行的源文件后缀："

#: ../../pages/spec/manifest.md:652
msgid ""
"Further, you can instruct the preprocessor to run on source files in specific"
" directories:"
msgstr "此外，你可以指示预处理器在特定目录中的源文件上运行："

#: ../../pages/spec/manifest.md:662
msgid "Preprocessor macros can be defined like this:"
msgstr "预处理器宏可以这样定义："

#: ../../pages/spec/manifest.md:672
msgid "We can also use dotted keys to define our preprocessor settings."
msgstr "我们还可以使用虚线键来定义我们的预处理器设置。"

#: ../../pages/spec/manifest.md:683
msgid "We can also define valued macros in preprocess table."
msgstr "我们还可以在预处理表中定义有值的宏。"

#: ../../pages/spec/manifest.md:692
msgid ""
"We can also reuse values like version number from manifest as a value for a "
"macro."
msgstr "我们还可以重用清单中的版本号等值作为宏的值。"

#: ../../pages/spec/manifest.md:703
msgid "Additional free data field"
msgstr "其它可用数据字段"

#: ../../pages/spec/manifest.md:705
msgid ""
"Third-party tools can store their configuration inside the *extra* section. "
"This section will never be evaluated by fpm itself, the only constraint "
"imposed is that it has to be valid TOML."
msgstr "第三方工具可以将其配置存储在额外（*extra*）部分中。此部分永远不会由fpm本身进行评估，施加的唯一约束是它必须是有效的TOML。"

#: ../../pages/spec/manifest.md:708
msgid ""
"Since the format of this section is free, only recommendations are provided "
"here for adding data to the *extra* section."
msgstr "由于此部分的格式是自由的，因此此处仅提供了将数据添加到额外（*extra*）部分的建议。"

#: ../../pages/spec/manifest.md:710
msgid ""
"Only use subtables, never add configuration data to the top level of the "
"*extra* section. Reasoning: different tools can avoid collisions of key names"
" by placing their data in separate subtables."
msgstr "仅使用子表，切勿将配置数据添加到额外（*extra*）部分的顶层。推理：不同的工具可以通过将其数据放在单独的子表中来避免键名的冲突。"

#: ../../pages/spec/manifest.md:712
msgid ""
"Use the concrete name of the tool rather than a generic name for the "
"subtable. Reasoning: different formatter or linter tools might use "
"conflicting keywords in a *format* or *lint* subtable. Also, users can tell "
"from the table name which tool is preferred to use with the project."
msgstr "使用工具的具体名称，而不是子表的通用名称。推理：不同的格式化程序或linter工具可能会在格式（*format*）或*lint*子表中使用冲突的关键词。此外，用户还可以从表名中判断哪个工具更适合用于项目。"

#: ../../pages/spec/manifest.md:715
msgid ""
"Fpm plugins should use a subtable with their plugin name in the *extra.fpm* "
"section to store their data. Reasoning: following this convention provides "
"the user of fpm plugins with one section to configure their used plugins."
msgstr "fpm插件应在*extra.fpm*部分中使用带有其插件名称的子表来存储其数据。推理：遵循此约定为fpm插件的用户提供一个部分来配置其使用的插件。"

#: ../../pages/spec/manifest.md:717
msgid ""
"Use the fpm preferred style for keywords which is lowercase with dashes. "
"Reasoning: while there is no style check in this section, a consistent style "
"in the whole manifest will make it easier for the user to understand the "
"whole package manifest."
msgstr "对关键词使用fpm首选样式，该样式是小写和短划线。推理：虽然本节中没有样式检查，但整个清单中的一致样式将使用户更容易理解整个包清单。"

#: ../../pages/spec/manifest.md:720
msgid ""
"Feedback for the recommendations above is very much welcome. If you have a "
"tool that uses the *extra* section in the package manifest, feel free to post"
" it in at the [fpm discussion board](https://github.com/fortran-"
"lang/fpm/discussions)."
msgstr ""
"非常欢迎对上述建议的反馈。如果你有使用包清单中额外（*extra*）部分的工具，请随时将其发布在[fpm讨论板](https://github.com"
"/fortran-lang/fpm/discussions)上。"

#: ../../pages/spec/naming.md:1
msgid "Module name requirements"
msgstr "模块名称要求"

#: ../../pages/spec/naming.md:4
msgid ""
"Module naming requirements only apply to packages which are uploaded to a fpm"
" registry; by default, no naming rules are enforced for local fpm projects."
msgstr "模块命名要求只适用于上传到fpm注册表的软件包；默认情况下，本地fpm项目不执行命"
"名规则。"

#: ../../pages/spec/naming.md:8
msgid "TL;DR Always prefix all your module names with a standardized package prefix."
msgstr "如题，始终用一个标准化的包前缀来命名你的所有模块。"

#: ../../pages/spec/naming.md:9
msgid ""
"A default prefix (package name + double underscore: `my_package__*`) is "
"always reserved by the registry"
msgstr "一个默认的前缀（包名+双下划线：`my_package__*`）总是由注册表保留"

#: ../../pages/spec/naming.md:10
msgid ""
"A custom prefix (no-symbols + single underscore: `mypkg_*`) can be specified,"
" but it is subject to not being reserved in the registry yet."
msgstr "可以指定一个自定义的前缀（无符号+单下划线：`mypkg_*`），但它受制于还没有在注"
"册表中被保留。"

#: ../../pages/spec/naming.md:11
msgid ""
"Set default (`module-naming=true`) or custom (`module-naming=\"mypfx\"`) "
"prefix in `fpm.toml` `[build]`."
msgstr ""
"在`fpm.toml`的`[build]`中设置默认（`module-naming=true`）或自定义（`module-"
"naming=\"mypfx\"`）前缀。"

#: ../../pages/spec/naming.md:14
msgid ""
"The Fortran language does not support namespaces. This means that all public "
"names (modules, but also global subroutines and functions) must be unique in "
"the build space. Any build that contains duplicate names will fail because it"
" is impossible to resolve a name to a unique object. For this reason, fpm by "
"default requires all packages to comply with simple naming conventions that "
"apply to both the package name and its modules."
msgstr ""
"Fortran语言不支持命名空间。这意味着所有公共名称（模块，但也包括全局子程序和函"
"数）在构建空间中必须是唯一的。任何包含重复名字的构建都会失败，因为不可能将一"
"个名字解析为一个唯一的对象。出于这个原因，fpm默认要求所有的包都要遵守简单的命"
"名规则，这些规则同时适用于包名和它的模块。"

#: ../../pages/spec/naming.md:19
msgid "Fortran names: general rules"
msgstr "Fortran名称：一般规则"

#: ../../pages/spec/naming.md:21
msgid ""
"As of Fortran 2003 onward, valid Fortran names need to comply with the "
"following rules:"
msgstr "从Fortran 2003开始，有效的Fortran名称需要遵守以下规则："

#: ../../pages/spec/naming.md:23
msgid "Up to 63 characters long;"
msgstr "最长为63个字符；"

#: ../../pages/spec/naming.md:24
msgid "Letters are case insensitive;"
msgstr "字母是不分大小写的；"

#: ../../pages/spec/naming.md:25
msgid "Must begin with a letter;"
msgstr "必须以字母作为开头；"

#: ../../pages/spec/naming.md:26
msgid ""
"Only alphanumeric characters (letters, numbers) and underscores `_` are "
"allowed."
msgstr "只允许使用字母数字字符（字母、数字）和下划线`_`。"

#: ../../pages/spec/naming.md:28
msgid "*Examples of invalid Fortran names:*"
msgstr "*无效的Fortran名称的例子：*"

#: ../../pages/spec/naming.md:37
msgid "*Examples of valid Fortran names:*"
msgstr "*有效的Fortran名称的例子：*"

#: ../../pages/spec/naming.md:49
msgid "fpm registry names: rules for packages and modules"
msgstr "fpm注册表名称：软件包和模块的规则"

#: ../../pages/spec/naming.md:51
msgid ""
"To reduce the chance of name collisions, any Fortran module name in a package"
" must begin with a unique prefix. Two options are offered."
msgstr "为了减少名称冲突的机会，包中的任何Fortran模块名称必须以唯一的前缀开始。提供了"
"两个选项。"

#: ../../pages/spec/naming.md:54
msgid "Default Module names"
msgstr "默认模块名称"

#: ../../pages/spec/naming.md:56
msgid ""
"The default option is always valid for all packages, as it is uniquely bound "
"to the package name. It features a fortrannized package name, followed by a "
"double underscore, with these rules:"
msgstr "默认选项对所有软件包都是有效的，因为它与软件包名称唯一绑定。它的特点是一个tra"
"nsannized软件包名称，后面是一个双下划线，有这些规则："

#: ../../pages/spec/naming.md:58
msgid "Must begin with their package name;"
msgstr "必须以其包装名称开头；"

#: ../../pages/spec/naming.md:59
msgid ""
"The ``default separator`` `__` between the package name chunk and what "
"follows must be used;"
msgstr "必须在软件包名称块和后面的内容之间使用``默认的分隔符`` `__`；"

#: ../../pages/spec/naming.md:60
msgid ""
"Neither the module nor the package name shall contain the default separator "
"sequence elsewhere."
msgstr "模块和包的名称都不应该在其他地方包含默认的分隔符序列。"

#: ../../pages/spec/naming.md:63
msgid ""
"The default separator is a *double* underscore, single underscores are "
"allowed anywhere except at the end of a package name."
msgstr "默认的分隔符是*双*下划线，单下划线可以在任何地方使用，除了在包名的末尾。"

#: ../../pages/spec/naming.md:66
msgid "*Valid enforced module names*"
msgstr "*有效的执行模块名称*"

#: ../../pages/spec/naming.md:68
msgid ""
"When the naming conventions are enforced, these are example modules in a "
"package named `my_pkg` to illustrate the rules:"
msgstr "当命名规则被强制执行时，这些是在一个名为`my_pkg`的包中的例子模块，以说明规则"
"："

#: ../../pages/spec/naming.md:80
msgid "*Invalid enforced module names*"
msgstr "*无效的执行模块名称*"

#: ../../pages/spec/naming.md:82
msgid ""
"Considering the same package `my_pkg`, the following names will be invalid "
"according to the naming rules:"
msgstr "考虑到同一个软件，`my_pkg`，根据命名规则，以下名称将是无效的："

#: ../../pages/spec/naming.md:92
msgid "Custom Module names"
msgstr "自定义模块名称"

#: ../../pages/spec/naming.md:94
msgid ""
"Optionally, one can specify a custom prefix for the package's modules. The "
"custom prefix must be:"
msgstr "可以选择为包的模块指定一个自定义前缀。该自定义前缀必须是："

#: ../../pages/spec/naming.md:96
msgid "A valid Fortran name;"
msgstr "一个有效的Fortran名称；"

#: ../../pages/spec/naming.md:97
msgid ""
"Alphanumeric only characters (no spaces, symbols, dashes, underscores "
"allowed)."
msgstr "只有字母数字字符（不允许有空格、符号、破折号、下划线）。"

#: ../../pages/spec/naming.md:99
msgid ""
"Different from the default option, a custom prefix needs to be validated by "
"the registry, which keeps a list of unique custom prefixes to prevent name "
"collisions."
msgstr "与默认选项不同的是，自定义前缀需要经过注册表的验证，注册表保留了一个唯一的自"
"定义前缀列表，以防止名称碰撞。"

#: ../../pages/spec/naming.md:102
msgid ""
"Module names with the custom prefix are followed by a ``single underscore`` "
"`_`, which makes this option more flexible and backward compatible with "
"existing packages. When a custom module prefix is specified, the default one "
"is still available. Considering for example a package named `date-time`, with"
" chosen prefix `dt`, the following are all valid module names:"
msgstr ""
"带有自定义前缀的模块名称后面有一个``单下划线`` `_`，这使得这个选项更加灵活，"
"并向后兼容现有的软件包。当自定义模块前缀被指定时，默认的前缀仍然可用。例如，"
"考虑到一个名为 `date-time`的包，并选择了前缀 `dt`，以下是所有有效的模块名称："

#: ../../pages/spec/naming.md:116
msgid "Package names"
msgstr "包名称"

#: ../../pages/spec/naming.md:118
msgid ""
"All packages in FPM registries must have unique names, hence they must abide "
"to the following rules"
msgstr "FPM注册表中的所有软件包必须有唯一的名称，因此它们必须遵守以下规则"

#: ../../pages/spec/naming.md:120
msgid "All package names shall be valid Fortran names;"
msgstr "所有包的名称都应是有效的Fortran名称；"

#: ../../pages/spec/naming.md:121
msgid "Dash characters (`-`) are also allowed, and are treated by fpm as underscores;"
msgstr "破折号字符（`-`）也是允许的，并被fpm当作下划线处理；"

#: ../../pages/spec/naming.md:122
msgid ""
"Package names may contain uppercase and lowercase characters, but their "
"unique identification is made case insensitive;"
msgstr "包的名称可以包含大写和小写字符，但它们的唯一标识是不分大小写的；"

#: ../../pages/spec/naming.md:123
msgid "No duplicate package names are allowed within the same namespace."
msgstr "在同一命名空间内不允许有重复的包名。"

#: ../../pages/spec/naming.md:125
msgid "*Examples of valid package names:*"
msgstr "*有效软件包名称的例子：*"

#: ../../pages/spec/naming.md:134
msgid "*Examples of invalid package names:*"
msgstr "*无效的软件包名称的例子：*"

#: ../../pages/spec/naming.md:145
msgid "Manifest Settings"
msgstr "清单设置"

#: ../../pages/spec/naming.md:148
msgid "Key facts:"
msgstr "关键事实："

#: ../../pages/spec/naming.md:149
msgid ""
"FPM does not apply naming requirements by default. If you want them, enable "
"them in `fpm.toml`"
msgstr "FPM默认不应用命名要求。如果你想要它们，请在`fpm.toml`中启用它们"

#: ../../pages/spec/naming.md:150
msgid "FPM registries mandatorily require them. Ensure `fpm.toml` enables them."
msgstr "FPM注册处强制要求它们。确保`fpm.toml`启用它们。"

#: ../../pages/spec/naming.md:151
msgid ""
"Enable standard prefix with `module-naming=true`, custom prefix with `module-"
"naming=\"prefixname\"`."
msgstr "用`module-naming=true`启用标准前缀，用`module-naming=\"prefixname\""
"`启用自定义前缀。"

#: ../../pages/spec/naming.md:154
msgid ""
"Module naming requirements can be enabled in `fpm.toml` under the `build` "
"section, using the boolean flag `module-naming`. By default, `module-naming ="
" false`, so no registry name enforcing is checked during the build."
msgstr ""
"模块命名要求可以在`fpm.toml`中的`build`部分启用，使用布尔标志`module-"
"naming`。默认情况下，`module-naming = "
"false`，所以在构建过程中不会检查注册表的名称强制。"

#: ../../pages/spec/naming.md:179
msgid "Guidelines"
msgstr "准则"

#: ../../pages/spec/naming.md:182
msgid ""
"These are non-mandatory styling suggestions to improve code readability and "
"uniformity."
msgstr "这些是非强制性的风格建议，以提高代码的可读性和统一性。"

#: ../../pages/spec/naming.md:185
msgid ""
"It's recommended that the public API of each package is contained in a top-"
"level module, whose name is same as the package name. For example, assuming a"
" package ``DateTime`` deals with time and date in Fortran, one could have "
"several modules deal with parts of it:"
msgstr ""
"我们建议每个包的公共API都包含在一个顶级模块中，其名称与包的名称相同。例如，假"
"设一个包``DateTime``在Fortran中处理时间和日期，我们可以有几个模块来处理它的一"
"部分："

#: ../../pages/spec/naming.md:194
msgid "and a unique public API that's contained in the top-level module:"
msgstr "和一个独特的公共API，它包含在顶层模块中："

#: ../../pages/spec/naming.md:211
msgid "References"
msgstr "引用"

#: ../../pages/spec/naming.md:213
msgid ""
"[1] Metcalf, Reid, Cohen, \"[Modern Fortran "
"Explained](https://dl.acm.org/doi/book/10.5555/2090092)\", Oxford University "
"Press."
msgstr ""
"[1] Metcalf, Reid, Cohen, \"[Modern Fortran Explained](https://dl.acm.org/"
"doi/book/10.5555/2090092)\", Oxford University Press."

#: ../../pages/spec/naming.md:215
msgid ""
"[2] [Style Guide for Python Code](https://peps.python.org/pep-0008/#package-"
"and-module-names)"
msgstr ""
"[2] [Style Guide for Python Code](https://peps.python.org/pep-0008/#package-"
"and-module-names)"

#: ../../pages/spec/publish.md:1
msgid "Package upload"
msgstr "包上传"

#: ../../pages/spec/publish.md:3
msgid ""
"Packages can be uploaded to the [official registry](https://registry-"
"frontend.vercel.app) using the `fpm publish` command. After a successful "
"upload, users can search for the package and use it in their projects. But be"
" aware that the upload is permanent. Once a package is uploaded, it cannot be"
" deleted. If you want to make changes to a package, you will have to create a"
" new version of the package and upload that."
msgstr ""
"包可以使用`fpm publish`命令上传到[官方注册表](https://registry-frontend."
"vercel.app)。在成功上传后，用户可以搜索该软件包并在他们的项目中使用它。但要注"
"意的是，上传是永久性的。一旦一个软件包被上传，它就不能被删除。如果你想对软件"
"包进行修改，你将不得不创建一个新版本的软件包并上传。"

#: ../../pages/spec/publish.md:5
msgid ""
"**!!! Testing period – We are currently building and testing the registry. "
"All uploaded packages will be deleted after the testing period (in June 2023)"
" !!!**"
msgstr "**！！！测试期 - 我们目前正在建立和测试注册表。所有上传的包将在测试期结束后（"
"2023年6月）被删除！！！**"

#: ../../pages/spec/publish.md:7
msgid "Prerequisites"
msgstr "先决条件"

#: ../../pages/spec/publish.md:9
msgid "Register"
msgstr "注册"

#: ../../pages/spec/publish.md:11
msgid ""
"Before you can upload a package, you need to have an account on the official "
"registry. You can create an account by visiting the [registry website](https"
"://registry-frontend.vercel.app)."
msgstr ""
"在你上传包裹之前，你需要在官方登记处拥有一个账户。你可以通过访问[登记处网站]("
"https://registry-frontend.vercel.app)创建一个账户。"

#: ../../pages/spec/publish.md:15
msgid ""
"A package must be uploaded to a given namespace. If you don't have a "
"namespace yet, you need to create one on the website first."
msgstr "一个软件包必须上传到一个指定的命名空间。如果你还没有一个命名空间，你需要先在"
"网站上创建一个。"

#: ../../pages/spec/publish.md:17
msgid "Token"
msgstr "令牌"

#: ../../pages/spec/publish.md:19
msgid ""
"You need to generate a token for the namespace. You can do this on the "
"website as well. The token is used to authenticate the upload. Do not share "
"the token with anyone else. The token also expires after a certain amount of "
"time. If you need to upload a package again, you will need to generate a new "
"token."
msgstr ""
"你需要为命名空间生成一个令牌。你也可以在网站上这样做。该令牌用于验证上传。不"
"要与其他任何人分享该令牌。该令牌在一定时间后也会过期。如果你需要再次上传软件"
"包，你将需要生成一个新的令牌。"

#: ../../pages/spec/publish.md:23
msgid ""
"A package must specify a valid [semver](https://semver.org/) version in its "
"manifest."
msgstr "一个软件包必须在其清单中指定一个有效的[semver](https://semver.org/)版本。"

#: ../../pages/spec/publish.md:25
msgid ""
"You can check the version of the package by running `fpm publish --show-"
"package-version` before publishing."
msgstr "你可以在发布前通过运行`fpm publish --show-package-"
"version`来检查软件包的版本。"

#: ../../pages/spec/publish.md:27
msgid "License"
msgstr "许可证"

#: ../../pages/spec/publish.md:29
msgid ""
"A package must specify a valid [SPDX](https://spdx.org/licenses/) license in "
"its manifest."
msgstr "一个软件包必须在其清单中指定一个有效的[SPDX](https://spdx.org/licenses/"
")许可证。"

#: ../../pages/spec/publish.md:31
msgid "Upload rights"
msgstr "上传权限"

#: ../../pages/spec/publish.md:33
msgid ""
"A package can only be uploaded by package admins and maintainers. Package "
"admins can grant admin and maintainer rights to other users."
msgstr "一个软件包只能由软件包管理员和维护者上传。软件包管理员可以授予其他用户管理员"
"和维护者的权利。"

#: ../../pages/spec/publish.md:35
msgid "Uploading"
msgstr "上传"

#: ../../pages/spec/publish.md:37
msgid ""
"fpm will create a tarball and upload the package to the registry when all the"
" requirements are met. You can see all the data being sent to the registry "
"without uploading by running `fpm publish --show-form-data`."
msgstr ""
"fpm会创建一个tarball，并在满足所有要求后将包上传到注册表。你可以通过运行`fpm "
"publish --show-form-data`看到所有被发送到注册表的数据，而不需要上传。"

#: ../../pages/spec/publish.md:39
msgid ""
"To publish a package, run `fpm publish --token <token>` using the token you "
"generated on the website."
msgstr "要发布一个软件包，使用你在网站上生成的令牌运行`fpm publish --token <token>`。"

#: ../../pages/tutorial/dependencies.md:1
msgid "Adding dependencies"
msgstr "添加依赖项"

#: ../../pages/tutorial/dependencies.md:3
msgid ""
"This tutorial covers the usage of dependencies with fpm and how to reuse "
"existing fpm projects."
msgstr "本教程介绍如何用fpm处理依赖项及复用现有的fpm项目。"

#: ../../pages/tutorial/dependencies.md:5
msgid "Using the standard library"
msgstr "使用Fortran标准库"

#: ../../pages/tutorial/dependencies.md:7
msgid ""
"We start with a new project with fpm, we want to build a command line "
"application to read a file, find a certain pattern and replace it. Since we "
"do not want to write the replace function ourselves, we will use the Fortran "
"standard library ([stdlib](https://github.com/fortran-lang/stdlib)) as "
"dependency. In the package manifest we define *stdlib* in the *dependencies* "
"table:"
msgstr ""
"我们从一个使用fpm的新项目开始。我们想构建一个命令行应用程序来读取文件，找到某个模式（pattern）并替换它。由于我们不想自己编写替换函数，我们将使用Fortran标准库（[stdlib](https://github.com"
"/fortran-lang/stdlib)）作为*依赖项*。在包清单中，我们在依赖项表中定义*stdlib*："

#: ../../pages/tutorial/dependencies.md:11 ../../pages/tutorial/dependencies.md:77
#: ../../pages/tutorial/dependencies.md:112 ../../pages/tutorial/hello-fpm.md:33
msgid "fpm.toml"
msgstr "fpm.toml"

#: ../../pages/tutorial/dependencies.md:18
msgid ""
"Now we create a module with a procedure to perform the substitution. It "
"requires three steps:"
msgstr "现在，我们创建一个模块，其中包含执行替换的过程。它需要三个步骤："

#: ../../pages/tutorial/dependencies.md:21
msgid "reading a whole line from one unit"
msgstr "从文件通道读取整行；"

#: ../../pages/tutorial/dependencies.md:22
msgid "replace the pattern in the string"
msgstr "替换字符串中的模式；"

#: ../../pages/tutorial/dependencies.md:23
msgid "write the new string to an output"
msgstr "将新字符串写进输出通道"

#: ../../pages/tutorial/dependencies.md:25
msgid ""
"We will use the *replace\\_all* function from the *stdlib\\_strings* module "
"for this purpose. The implementation is shown here"
msgstr "为此，我们将使用 *stdlib_strings* 模块中的 *replace_all* 函数。以下为代码实现："

#: ../../pages/tutorial/dependencies.md:28
msgid "src/demo.f90"
msgstr "src/demo.f90"

#: ../../pages/tutorial/dependencies.md:33
msgid "Finally, we need a command line driver to make use of our new function."
msgstr "最后，我们需要一个命令行程序来使用我们的新函数。"

#: ../../pages/tutorial/dependencies.md:35 ../../pages/tutorial/dependencies.md:125
#: ../../pages/tutorial/hello-fpm.md:52
msgid "app/main.f90"
msgstr "app/main.f90"

#: ../../pages/tutorial/dependencies.md:54
msgid "We can check our command line driver by running it with fpm:"
msgstr "我们可以通过使用fpm运行命令行程序来检查它："

#: ../../pages/tutorial/dependencies.md:68
msgid "Adding a testing framework"
msgstr "添加测试框架"

#: ../../pages/tutorial/dependencies.md:70
msgid ""
"Before we continue implementing new features, we want to add some tests to "
"verify that our implementation keeps working as we modify it. A minimalist "
"testing framework is available with [test-drive]. Since the testing framework"
" is only required when developing the package itself, but not for other "
"packages which might in the future make use of our modules, we add it as a "
"development dependency. The *test-drive* package is added in the *dev-"
"dependencies* table as shown below"
msgstr ""
"在继续实现新功能之前，我们希望添加一些测试，以验证我们的实现在修改后是否保持工作状态。[test-drive](https://github.com"
"/fortran-lang/test-drive) "
"提供了一个极简的测试框架。由于仅在开发包本身时才需要测试框架，而对于将来可能使用我们的模块的其它包则不需要，我们添加了开发依赖项。*test-drive*"
" 包被添加到 *dev-dependencies* 表中，如下所示"

#: ../../pages/tutorial/dependencies.md:85
msgid ""
"For a development dependency like a testing framework we choose a strict "
"version pin by specifying the *tag* we want to use."
msgstr "像测试框架这样的开发依赖关系，我们通过指定标记（*tag*）来选择严格的版本引脚。"

#: ../../pages/tutorial/dependencies.md:88
msgid ""
"Now we can write a simple unit test, since our function works with units, we "
"will create scratch units to create the input and capture the output. For now"
" we will add a simple one line substitution as single test case"
msgstr "现在我们可以编写一个简单的单元测试。因为我们的函数执行需要文件通道，我们将创建暂存（scratch）通道来创建输入并捕获输出。现在，我们将添加一个简单的单行替换作为单个测试用例："

#: ../../pages/tutorial/dependencies.md:91
msgid "test/main.f90"
msgstr "test/main.f90"

#: ../../pages/tutorial/dependencies.md:96
msgid "We run our new test using fpm"
msgstr "我们使用 fpm 运行新测试："

#: ../../pages/tutorial/dependencies.md:104
msgid ""
"Creating the scratch units for multiple unit tests will be repetitive, this "
"kind of tasks can usually be done in a separate procedure and reused in "
"several tests."
msgstr "在多个单元测试中创建暂存通道比较繁琐，通常会在一个单独的过程中创建它们，然后在多个测试中重用。"

#: ../../pages/tutorial/dependencies.md:107
msgid "Target-specific dependencies"
msgstr "目标特定的依赖项"

#: ../../pages/tutorial/dependencies.md:109
msgid ""
"Dependencies can also be used for specific targets only. This can be used for"
" adding a command line interface package, which is only used for the "
"executable but not part of the library dependencies."
msgstr "依赖项也只能用于特定目标。这可用于添加命令行界面程序包，该包仅用于可执行文件，而不是库依赖项的一部分。"

#: ../../pages/tutorial/dependencies.md:118
msgid ""
"We restructure our main program a bit for using [M\\_CLI2] to handle the "
"command line input. The *unnamed* array contains all positional command line "
"arguments, we still use the first two as pattern and replacement, and use all"
" remaining arguments as input. We also add an option to redirect the output. "
"Our final main program looks like"
msgstr ""
"我们稍微重构了一下主程序，以便使用 [M_CLI2](https://github.com/urbanjost/M_CLI2) "
"来处理命令行输入。*unnamed* "
"数组包含所有位置命令行参数，我们仍然使用前两个作为模式和替换，并使用所有剩余的参数作为输入。我们还添加了一个选项来重定向输出。最终主程序像这样："

#: ../../pages/tutorial/dependencies.md:130
msgid "Again we run a quick check using fpm"
msgstr "我们再次使用 fpm 运行快速检查："

#: ../../pages/tutorial/dependencies.md:152
msgid "The output looks as expected with two substitutions."
msgstr "输出看起来与预期一样，有两个替换。"

#: ../../pages/tutorial/dependencies.md:155 ../../pages/tutorial/hello-fpm.md:97
#: ../../pages/tutorial/plugins.md:90
msgid "Summary"
msgstr "总结"

#: ../../pages/tutorial/dependencies.md:157 ../../pages/tutorial/hello-fpm.md:99
#: ../../pages/tutorial/plugins.md:92
msgid "In this tutorial you learned how to"
msgstr "在本教程中，你学习了如何"

#: ../../pages/tutorial/dependencies.md:159
msgid "depend on another fpm project in the package manifest"
msgstr "在包清单中添加对另一个fpm项目的依赖；"

#: ../../pages/tutorial/dependencies.md:160
msgid "add development dependencies for testing"
msgstr "添加用于测试的开发依赖项；"

#: ../../pages/tutorial/dependencies.md:161
msgid "use dependencies for executables"
msgstr "使用可执行文件的依赖项。"

#: ../../pages/tutorial/hello-fpm.md:1
msgid "First steps with fpm"
msgstr "使用 fpm 的第一步"

#: ../../pages/tutorial/hello-fpm.md:3
msgid ""
"This tutorial covers the basic usage of the Fortran Package Manager (fpm) "
"command line. It will cover the generation of a new project and the "
"possibility to compile a project into an executable as well as the "
"possibility to run the resulting program."
msgstr "本教程介绍了Fortran包管理器（fpm）的命令行基本用法。它涵盖新项目的生成、将项目编译为可执行文件的可能性以及运行结果程序的可能性。"

#: ../../pages/tutorial/hello-fpm.md:6
msgid "To start a new project with fpm use the *fpm new* command"
msgstr "要使用 fpm 新建项目，请使用 *fpm new* 命令:"

#: ../../pages/tutorial/hello-fpm.md:12
msgid ""
"By default fpm creates a git repository with a dummy project in the fpm "
"standard layout"
msgstr "默认情况下，fpm 使用 fpm 标准布局中的式样项目创建一个 git 存储库："

#: ../../pages/tutorial/hello-fpm.md:30
msgid ""
"This is everything we need to start our new project. First, we inspect the "
"package manifest, ``fpm.toml``, which is populated with stub entries for us:"
msgstr "这就是我们开始新项目所需的一切。首先，我们检查包清单``fpm.toml``，它为我们填充了存根条目："

#: ../../pages/tutorial/hello-fpm.md:49
msgid ""
"The package manifest contains all the required meta data for the new project."
" Next we checkout the main executable, ``app/main.f90``, fpm has generated "
"for us:"
msgstr "包清单包含新项目所需的所有元数据。接下来，我们检查主可执行文件``app/main.f90``，fpm已经为我们生成："

#: ../../pages/tutorial/hello-fpm.md:62
msgid ""
"The program already uses a module from our library, which we can find in "
"``src/first_steps.f90``:"
msgstr "该程序已经使用了我们库中的一个模块，我们可以在以下位置``src/first_steps.f90``找到该模块："

#: ../../pages/tutorial/hello-fpm.md:64
msgid "src/first_steps.f90"
msgstr "src/first_steps.f90"

#: ../../pages/tutorial/hello-fpm.md:78
msgid "We can run the executable directly with the command ``fpm run``:"
msgstr "我们可以直接使用以下命令``fpm run``运行可执行文件："

#: ../../pages/tutorial/hello-fpm.md:86
msgid ""
"Similarly, fpm has already created a stub for testing, which can be invoked "
"with ``fpm test``:"
msgstr "类似地，fpm会创建了一个用于测试的存根，可以使用命令``fpm test``调用："

#: ../../pages/tutorial/hello-fpm.md:94
msgid ""
"Fpm will automatically track changes in your project when running your "
"project using the *run* and *test* commands."
msgstr "fpm将在使用运行命令（*run*）和测试命令（*test*）运行项目时自动跟踪项目中的更改。"

#: ../../pages/tutorial/hello-fpm.md:101
msgid "create a new project from the fpm command line"
msgstr "从fpm命令行创建新项目；"

#: ../../pages/tutorial/hello-fpm.md:102
msgid "build and run your project executables with fpm"
msgstr "使用fpm构建和运行项目可执行文件；"

#: ../../pages/tutorial/hello-fpm.md:103
msgid "run tests with fpm"
msgstr "使用 fpm 运行测试。"

#: ../../pages/tutorial/index.md:3
msgid "Tutorials"
msgstr "教程"

#: ../../pages/tutorial/index.md:6
msgid ""
"This section contains courses for learning about the usage and fpm at "
"specific examples."
msgstr "本节包含用于了解特定示例的用法和fpm的教程。"

#: ../../pages/tutorial/plugins.md:1
msgid "Extending fpm with plugins"
msgstr "使用插件扩展fpm"

#: ../../pages/tutorial/plugins.md:3
msgid ""
"The Fortran package manager has a plugin system which allows to easily extend"
" its functionality. This tutorial will show how to install a plugin with fpm "
"and use it."
msgstr "Fortran包管理器有一个插件系统，可以轻松扩展其功能。本教程将展示如何使用fpm安装插件并使用它。"

#: ../../pages/tutorial/plugins.md:7
msgid "Registry search tool"
msgstr "注册表搜索工具"

#: ../../pages/tutorial/plugins.md:9
msgid ""
"The [fpm-search](https://github.com/urbanjost/fpm-search) project is a plugin"
" to query the package registry. Since it is built with fpm we can easily "
"install it on our system with"
msgstr ""
"[fpm-search](https://github.com/urbanjost/fpm-search) 项目是一个用于查询包注册表的插件。由于它是使用"
" fpm 构建的，因此我们可以轻松地将其安装在我们的系统上："

#: ../../pages/tutorial/plugins.md:18
msgid ""
"This will install the ``fpm-search`` binary to ``~/.local/bin`` (or "
"``%APPDATA%\\local\\bin`` on Windows)."
msgstr ""
"这会将二进制文件``fpm-"
"search``安装到``~/.local/bin``（或在Windows上的``%APPDATA%\\local\\bin``）。"

#: ../../pages/tutorial/plugins.md:21
msgid "Ensure that the installed binary is in the ``PATH``, *i.e.* run"
msgstr "确保安装的二进制文件位于环境路径（``PATH``）中，即运行："

#: ../../pages/tutorial/plugins.md:28
msgid "If no binary is found, add the directory to your path using"
msgstr "如果未找到二进制文件，请使用："

#: ../../pages/tutorial/plugins.md
msgid "Bash (Linux)"
msgstr "Bash (Linux)"

#: ../../pages/tutorial/plugins.md:34
msgid ""
"Default settings for the bash shell can be found in the ``.bashrc`` file in "
"the home directory, to append to the ``PATH`` following the instructions "
"below."
msgstr "bash shell 的默认设置可以在主目录的 ``.bashrc`` 中找到，根据以下说明以附加到环境路径（``PATH``）："

#: ../../pages/tutorial/plugins.md:41
msgid ""
"Make sure to source your ``.bashrc`` after changing it, otherwise the change "
"will not be applied to the current shell."
msgstr "确保在更改 ``.bashrc`` 后载入它，否则更改将不会应用于当前 shell。"

#: ../../pages/tutorial/plugins.md
msgid "Zsh (MacOS)"
msgstr "Zsh (MacOS)"

#: ../../pages/tutorial/plugins.md:45
msgid ""
"Default settings for the zsh shell can be found in the ``.zshrc`` file in the"
" home directory, to append to the ``PATH`` use"
msgstr "zsh shell 的默认设置可以在主目录的 ``.zshrc`` 文件中找到，以附加到环境路径（``PATH``）使用："

#: ../../pages/tutorial/plugins.md:52
msgid ""
"Make sure to restart zsh after changing the ``.zshrc`` it, otherwise the "
"change will not be applied to the current shell."
msgstr "确保在更改``.zshrc``后重新启动zsh，否则更改将不会应用于当前shell。"

#: ../../pages/tutorial/plugins.md
msgid "CMD (Windows)"
msgstr "CMD (Windows)"

#: ../../pages/tutorial/plugins.md:56
msgid ""
"The ``PATH`` variable can be modified using the pathman program from the cmd "
"prompt"
msgstr "可以使用 cmd 提示符中的路径程序修改变量 ``PATH``："

#: ../../pages/tutorial/plugins.md:64
msgid "Now with a working installation we can invoke our new plugin from fpm."
msgstr "现在，通过之前的安装工作，我们可以从fpm调用我们的新插件。"

#: ../../pages/tutorial/plugins.md:72
msgid ""
"Note that we use ``fpm search`` rather than ``fpm-search`` in the command. To"
" find a package for building a command-line interface we can now type"
msgstr "请注意，我们使用 ``fpm search`` 而不是在命令中使用 ``fpm-search`` 。要查找用于构建命令行界面的包，我们现在可以键入："

#: ../../pages/tutorial/plugins.md:81
msgid ""
"To use one of the packages in our manifest we can generate the necessary "
"dependency line by running"
msgstr "要使用清单中的某个包，我们可以通过以下方式生成必要的依赖关系行："

#: ../../pages/tutorial/plugins.md:88
msgid ""
"Adding this line to a package manifest allows to depend on the respective "
"project."
msgstr "将此行添加到包清单以允许依赖于相应的项目。"

#: ../../pages/tutorial/plugins.md:94
msgid "installing an fpm plugin"
msgstr "安装fpm插件；"

#: ../../pages/tutorial/plugins.md:95
msgid "use the fpm-search plugin to query the registry"
msgstr "使用fpm搜索插件查询注册表；"

#: ../../pages/tutorial/plugins.md:96
msgid "generate a dependency entry from a query result"
msgstr "根据查询结果生成依赖项条目。"

#~ msgid "Registry  <https://fortran-lang.org/packages/fpm>"
#~ msgstr "注册表 <https://fortran-lang.org/packages/fpm>"

#~ msgid "News"
#~ msgstr "新闻"

#~ msgid "Meta: Translating the docs"
#~ msgstr "Meta：翻译文档"

#~ msgid ""
#~ "This documentation is divided into four "
#~ "parts. Select one of the topics below"
#~ " to continue."
#~ msgstr "本文档分为四个主要部分，请选择以下任一主题浏览。"

#~ msgid "{octicon}`milestone` Design Documents"
#~ msgstr "{octicon}`milestone` 设计文档"

#~ msgid ""
#~ "Resources about the design of the "
#~ "command line interface, the package "
#~ "manifest, and the general user experience"
#~ msgstr "关于命令行界面设计、程序包清单和一般用户体验的资料。"

#~ msgid "Browse documents"
#~ msgstr "浏览文档"
